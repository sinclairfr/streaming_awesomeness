# playback_position_manager.py
import os
import time
import random
import json
import threading
import subprocess
from pathlib import Path
from config import logger


class PlaybackPositionManager:
    """
    # Gestionnaire de position de lecture pour les streams
    # Permet de suivre, sauvegarder et restaurer la position de lecture
    """
    def __init__(self, channel_name):
        self.channel_name = channel_name
        self.lock = threading.Lock()
        
        # Valeurs de position
        self.current_position = 0.0       # Position actuelle en secondes
        self.last_known_position = 0.0    # Derni√®re position connue avant arr√™t
        self.start_offset = 0.0           # Offset de d√©marrage
        self.last_update_time = time.time()  # Dernier moment o√π on a mis √† jour la position
        
        # Gestion de la dur√©e
        self.total_duration = 0.0         # Dur√©e totale de la playlist
        self.file_durations = {}          # Dur√©es individuelles des fichiers
        
        # √âtat
        self.is_playing = False           # Si la lecture est en cours
        self.last_progress_file = None    # Dernier fichier de progression utilis√©
        
        # Cr√©ation du dossier de sauvegarde si n√©cessaire
        self.state_dir = Path("/app/state")
        self.state_dir.mkdir(exist_ok=True, parents=True)
        
        # Chargement de l'√©tat pr√©c√©dent
        self._load_state()
  
    def set_playback_offset(self, offset):
        """
        # D√©finit l'offset de lecture avec validation
        """
        with self.lock:
            # V√©rifier que les attributs existent, sinon les initialiser
            if not hasattr(self, 'playback_offset'):
                self.playback_offset = 0.0
            if not hasattr(self, 'last_playback_time'):
                self.last_playback_time = time.time()
            
            # S'assurer que l'offset est valide et dans les limites
            if self.total_duration > 0:
                # Appliquer le modulo pour rester dans les limites
                self.playback_offset = offset % self.total_duration
                logger.debug(f"[{self.channel_name}] üîÑ Offset ajust√© √† {self.playback_offset:.2f}s (modulo {self.total_duration:.2f}s)")
            else:
                self.playback_offset = offset
                
            self.last_playback_time = time.time()
            self._save_state()         
 
    def set_total_duration(self, duration):
        """
        # D√©finit la dur√©e totale de la playlist
        """
        with self.lock:
            self.total_duration = duration
            self._save_state()
    
    def get_start_offset(self):
        # Utiliser l'horodatage actuel pour calculer un offset qui √©volue naturellement
        reference_date = time.mktime((2025, 1, 1, 0, 0, 0, 0, 0, 0))
        current_time = time.time()
        elapsed = current_time - reference_date
        if self.total_duration > 0:
            offset = elapsed % self.total_duration
            logger.info(f"[{self.channel_name}] Offset calcul√©: {offset:.2f}s (modulo {self.total_duration:.2f}s)")
            return offset
        else:
            # Fallback s√©curis√©
            logger.warning(f"[{self.channel_name}] ‚ö†Ô∏è Dur√©e totale invalide, offset √† 0")
            return 0.0
     
    def calculate_durations(self, video_files):
        """
        # Calcule la dur√©e totale √† partir d'une liste de fichiers vid√©o
        """
        try:
            logger.info(f"[{self.channel_name}] üïí Calcul des dur√©es pour {len(video_files)} fichiers...")
            
            # On r√©initialise les dur√©es
            self.file_durations = {}
            self.total_duration = 0
            
            for video in video_files:
                duration = self._get_file_duration(video)
                if duration > 0:
                    self.file_durations[str(video)] = duration
                    self.total_duration += duration
            
            logger.info(f"[{self.channel_name}] ‚úÖ Dur√©e totale: {self.total_duration:.2f}s")
            
            # On sauvegarde l'√©tat
            self._save_state()
            
            return self.total_duration
            
        except Exception as e:
            logger.error(f"[{self.channel_name}] ‚ùå Erreur calcul dur√©es: {e}")
            return 0
    
    def _get_file_duration(self, video_path, max_retries=2):
        """
        # Obtient la dur√©e d'un fichier vid√©o avec retries
        """
        for i in range(max_retries + 1):
            try:
                cmd = [
                    "ffprobe",
                    "-v", "error",
                    "-show_entries", "format=duration",
                    "-of", "default=noprint_wrappers=1:nokey=1",
                    str(video_path)
                ]

                result = subprocess.run(cmd, capture_output=True, text=True)
                
                if result.returncode == 0:
                    try:
                        duration = float(result.stdout.strip())
                        if duration > 0:
                            return duration
                    except ValueError:
                        pass
                
                # Si on arrive ici, c'est que √ßa a √©chou√©
                logger.warning(f"[{self.channel_name}] ‚ö†Ô∏è Tentative {i+1}/{max_retries+1} √©chou√©e pour {video_path}")
                time.sleep(0.5)  # Petite pause avant la prochaine tentative
                
            except Exception as e:
                logger.error(f"[{self.channel_name}] ‚ùå Erreur ffprobe: {e}")
        
        # Si on a √©chou√© apr√®s toutes les tentatives, on renvoie une dur√©e par d√©faut
        logger.error(f"[{self.channel_name}] ‚ùå Impossible d'obtenir la dur√©e pour {video_path}")
        return 0
    
    def _save_state(self):
        """Sauvegarde uniquement les informations essentielles"""
        try:
            state_file = self.state_dir / f"{self.channel_name}_position.json"
            
            state = {
                "channel_name": self.channel_name,
                "total_duration": self.total_duration,
                "last_update": time.time()
            }
            
            with open(state_file, 'w') as f:
                json.dump(state, f)
                
        except Exception as e:
            logger.error(f"[{self.channel_name}] ‚ùå Erreur sauvegarde √©tat: {e}")
    
    def _load_state(self):
        """Charge seulement la dur√©e totale de la playlist"""
        try:
            state_file = self.state_dir / f"{self.channel_name}_position.json"
            
            if not state_file.exists():
                return
                
            with open(state_file, 'r') as f:
                state = json.load(f)
                
            # On ne charge que si c'est le m√™me channel
            if state.get("channel_name") != self.channel_name:
                return
                
            # On r√©cup√®re uniquement la dur√©e totale
            self.total_duration = state.get("total_duration", 0)
            
        except Exception as e:
            logger.error(f"[{self.channel_name}] ‚ùå Erreur lors du chargement: {e}")
            
    def update_from_progress(self, progress_file):
        """
        # Met √† jour la position √† partir du fichier de progression FFmpeg
        # Avec d√©tection des anomalies de saut au d√©marrage
        """
        if not progress_file or not Path(progress_file).exists():
            return False
            
        try:
            self.last_progress_file = progress_file
            
            with open(progress_file, 'r') as f:
                content = f.read()
                
                # On cherche la position dans le fichier de progression
                if 'out_time_ms=' in content:
                    position_lines = [l for l in content.split('\n') if 'out_time_ms=' in l]
                    if position_lines:
                        # On prend la derni√®re ligne
                        time_part = position_lines[-1].split('=')[1]
                        
                        if time_part.isdigit():
                            # Conversion en secondes
                            ms_value = int(time_part)
                            new_position = ms_value / 1_000_000
                            
                            # AJOUT: D√©tection des sauts anormaux (r√©gression d'offset importante)
                            if hasattr(self, 'start_offset') and self.start_offset > 10:
                                # Si on est dans les premi√®res secondes apr√®s le d√©marrage
                                now = time.time()
                                if hasattr(self, 'stream_start_time') and now - self.stream_start_time < 30:
                                    # Si le nouveau temps est proche de z√©ro alors qu'on avait demand√© un offset important
                                    if new_position < 10 and abs(new_position - self.start_offset) > 30:
                                        logger.warning(f"[{self.channel_name}] ‚ö†Ô∏è D√©tection d'une r√©gression anormale d'offset: {new_position}s vs {self.start_offset}s demand√©, on ignore cette mise √† jour")
                                        return False
                            
                            # Correction pour valeurs n√©gatives 
                            if ms_value < 0 and self.total_duration > 0:
                                ms_value = (self.total_duration * 1_000_000) + ms_value
                                new_position = ms_value / 1_000_000
                            
                            # Mise √† jour de la position
                            with self.lock:
                                # Log des sauts importants
                                if abs(self.current_position - new_position) > 30:
                                    logger.info(f"[{self.channel_name}] üìä Saut d√©tect√©: {self.current_position:.2f}s ‚Üí {new_position:.2f}s")
                                    
                                self.current_position = new_position
                                self.last_update_time = time.time()
                                
                            return True
            
            return False
                                
        except Exception as e:
            logger.error(f"[{self.channel_name}] ‚ùå Erreur lecture position: {e}")
            return False