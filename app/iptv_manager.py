# iptv_manager.py
import os
import sys
import time
import glob
import shutil
import signal
import random
import psutil
import threading
import traceback
from queue import Queue
from pathlib import Path
from watchdog.observers import Observer

from config import (
    logger,
    SERVER_URL,
    NGINX_ACCESS_LOG
)
from event_handler import ChannelEventHandler
from hls_cleaner import HLSCleaner
from client_monitor import ClientMonitor
from resource_monitor import ResourceMonitor
from iptv_channel import IPTVChannel
import os
from pathlib import Path

def ensure_persistent_hls():
    """Cr√©e et fixe les permissions du dossier HLS au d√©marrage"""
    hls_path = Path("/app/hls")
    if not hls_path.exists():
        print("üìÇ Cr√©ation du dossier HLS...")
        hls_path.mkdir(parents=True, exist_ok=True)
    
    os.chmod(hls_path, 0o777)  # Assure que FFmpeg pourra √©crire dedans

ensure_persistent_hls()

class IPTVManager:
    """
    # On g√®re toutes les cha√Ænes, le nettoyage HLS, la playlist principale, etc.
    """

    # Constantes
    VIDEO_EXTENSIONS = (".mp4", ".avi", ".mkv", ".mov")
    CPU_THRESHOLD = 85
    SEGMENT_AGE_THRESHOLD = 30  # En secondes

    def __init__(self, content_dir: str, use_gpu: bool = False):
        self.content_dir = content_dir
        self.use_gpu = use_gpu
        self.channels = {}

        # On initialise le nettoyeur HLS avec le bon chemin
        self.hls_cleaner = HLSCleaner("/app/hls")
        self.hls_cleaner.initial_cleanup()
        self.hls_cleaner.start()

        self.scan_lock = threading.Lock()
        self.failing_channels = set()
        self.channel_queue = Queue()

        logger.info("Initialisation du gestionnaire IPTV")
        self._clean_startup()

        # Observer
        self.observer = Observer()
        event_handler = ChannelEventHandler(self)
        self.observer.schedule(event_handler, self.content_dir, recursive=True)

        # On cr√©e tous les objets IPTVChannel mais SANS d√©marrer FFmpeg
        logger.info(f"Scan initial dans {self.content_dir}")
        self.scan_channels(initial=True, force=True)

        # Moniteur clients
        self.client_monitor = ClientMonitor(NGINX_ACCESS_LOG, self)
        self.client_monitor.start()

        # Moniteur ressources
        self.resource_monitor = ResourceMonitor()
        self.resource_monitor.start()

        # Thread de mise √† jour de la playlist ma√Ætre
        self.master_playlist_updater = threading.Thread(
            target=self._master_playlist_loop,
            daemon=True
        )
        self.master_playlist_updater.start()

        # Thread qui v√©rifie les watchers
        self.watchers_thread = threading.Thread(
            target=self._watchers_loop,
            daemon=True
        )
        self.watchers_thread.start()
    def _watchers_loop(self):
        """
        Boucle qui v√©rifie p√©riodiquement si watchers_count=0 depuis plus de 60s,
        et arr√™te FFmpeg pour √©conomiser des ressources.
        """
        while True:
            try:
                for channel_name, channel in self.channels.items():
                    if channel.watchers_count == 0:
                        # personne ne regarde
                        # Est-ce qu'on est √† 0 depuis plus de 60s ?
                        idle_time = time.time() - channel.last_watcher_time
                        if idle_time > 60:
                            channel.stop_stream_if_needed()
            except Exception as e:
                logger.error(f"Erreur watchers_loop: {e}")

            time.sleep(10)  # on v√©rifie toutes les 10s

    def update_watchers(self, channel_name: str, count: int):
        """Met √† jour le nombre de watchers et g√®re le stream"""
        try:
            logger.info(f"üìä Mise √† jour {channel_name}: {count} watchers")

            if channel_name not in self.channels:
                logger.error(f"‚ùå Cha√Æne inconnue: {channel_name}")
                return

            channel = self.channels[channel_name]
            old_count = channel.watchers_count

            # Mise √† jour du nombre de watchers
            channel.watchers_count = count
            if count > 0:
                channel.last_watcher_time = time.time()

            logger.info(f"[{channel_name}] Watchers: {old_count} -> {count}")

            # üî• LOGS POUR DEBUG üî•
            if old_count == 0 and count > 0:
                logger.info(f"[{channel_name}] üî• APPEL de start_stream() (0 -> 1 watcher)")
                if not channel.start_stream():
                    logger.error(f"[{channel_name}] ‚ùå √âchec d√©marrage stream")

            elif old_count > 0 and count == 0:
                logger.info(f"[{channel_name}] üõë Plus aucun watcher, arr√™t du stream...")
                channel.stop_stream_if_needed()

            # On met √† jour la master playlist
            self.generate_master_playlist()

        except Exception as e:
            logger.error(f"‚ùå Erreur update_watchers: {e}")

    def _clean_startup(self):
        """# On nettoie avant de d√©marrer"""
        try:
            logger.info("üßπ Nettoyage initial...")
            patterns_to_clean = [
                ("/app/hls/**/*", "Fichiers HLS"),
                ("/app/content/**/_playlist.txt", "Playlists"),
                ("/app/content/**/*.vtt", "Fichiers VTT"),
                ("/app/content/**/temp_*", "Fichiers temporaires"),
            ]
            for pattern, desc in patterns_to_clean:
                count = 0
                for f in glob.glob(pattern, recursive=True):
                    try:
                        if os.path.isfile(f):
                            os.remove(f)
                        elif os.path.isdir(f):
                            shutil.rmtree(f)
                        count += 1
                    except Exception as e:
                        logger.error(f"Erreur nettoyage {f}: {e}")
                logger.info(f"‚ú® {count} {desc} supprim√©s")
            os.makedirs("/app/hls", exist_ok=True)
        except Exception as e:
            logger.error(f"Erreur nettoyage initial: {e}")

    def _process_channel_queue(self):
        """# On traite la file d'attente (channels) en v√©rifiant les ressources"""
        while True:
            try:
                channel = self.channel_queue.get()
                cpu_usage = psutil.cpu_percent()
                if cpu_usage > self.CPU_THRESHOLD:
                    logger.warning(
                        f"CPU trop charg√© ({cpu_usage}%), on retarde {channel.name}"
                    )
                    time.sleep(10)
                    self.channel_queue.put(channel)
                    continue

                if channel.name in self.failing_channels:
                    logger.info(f"Cha√Æne {channel.name} en √©chec, nettoyage...")
                    self._clean_channel(channel.name)

                success = self._start_channel(channel)
                if not success:
                    self.failing_channels.add(channel.name)
                else:
                    self.failing_channels.discard(channel.name)
            except Exception as e:
                logger.error(f"Erreur file d'attente: {e}")
            finally:
                self.channel_queue.task_done()

    def _start_channel(self, channel: IPTVChannel) -> bool:
        """# On tente de d√©marrer une cha√Æne"""
        try:
            if psutil.cpu_percent() > self.CPU_THRESHOLD:
                logger.warning(f"CPU trop charg√© pour {channel.name}")
                return False

            if not channel._scan_videos():
                logger.error(f"Aucune vid√©o valide pour {channel.name}")
                return False

            start_time = time.time()
            if not channel.start_stream():
                return False

            # On attend l'apparition des segments
            while time.time() - start_time < 10:
                if list(Path(f"/app/hls/{channel.name}").glob("*.ts")):
                    logger.info(f"‚úÖ Cha√Æne {channel.name} d√©marr√©e avec succ√®s")
                    return True
                time.sleep(0.5)

            logger.error(f"‚ùå Timeout d√©marrage {channel.name}")
            return False
        except Exception as e:
            logger.error(f"Erreur d√©marrage {channel.name}: {e}")
            return False

    def scan_channels(self, force: bool = False, initial: bool = False):
        """
        On scanne le contenu pour d√©tecter les nouveaux dossiers (cha√Ænes).
        """
        with self.scan_lock:
            try:
                content_path = Path(self.content_dir)
                if not content_path.exists():
                    logger.error(f"Le dossier {content_path} n'existe pas!")
                    return

                channel_dirs = [d for d in content_path.iterdir() if d.is_dir()]

                logger.info(f"üì° Scan des cha√Ænes disponibles...")
                for channel_dir in channel_dirs:
                    channel_name = channel_dir.name

                    if channel_name in self.channels:
                        logger.info(f"üîÑ Cha√Æne existante : {channel_name}")
                        continue

                    logger.info(f"‚úÖ Nouvelle cha√Æne trouv√©e : {channel_name}")
                    self.channels[channel_name] = IPTVChannel(
                        channel_name,
                        str(channel_dir),
                        hls_cleaner=self.hls_cleaner,
                        use_gpu=self.use_gpu
                    )

                logger.info(f"üì° Scan termin√©, {len(self.channels)} cha√Ænes enregistr√©es.")

            except Exception as e:
                logger.error(f"Erreur scan des cha√Ænes: {e}")

    def _start_ready_channel(self, channel: IPTVChannel):
        """# On d√©marre rapidement une cha√Æne d√©j√† pr√™te"""
        try:
            logger.info(f"D√©marrage rapide de la cha√Æne {channel.name}")
            if channel._scan_videos():
                if channel.start_stream():
                    logger.info(f"‚úÖ {channel.name} d√©marr√©e")
                    self.generate_master_playlist()
                else:
                    logger.error(f"‚ùå √âchec d√©marrage {channel.name}")
            else:
                logger.error(f"‚ùå √âchec scan vid√©os {channel.name}")
        except Exception as e:
            logger.error(f"Erreur d√©marrage {channel.name}: {e}")

    def ensure_hls_directory(self, channel_name: str):
        """Cr√©e le dossier HLS si inexistant avec les bonnes permissions"""
        hls_path = Path(f"/app/hls/{channel_name}")
        if not hls_path.exists():
            logger.info(f"üìÇ Cr√©ation du dossier HLS pour {channel_name}")
            hls_path.mkdir(parents=True, exist_ok=True)
            os.chmod(hls_path, 0o777)  # Autorise tout le monde √† √©crire

    def _process_new_channels(self, channel_dirs):
        """# On traite de nouvelles cha√Ænes sans vid√©o trait√©e"""
        for channel_dir in channel_dirs:
            try:
                channel_name = channel_dir.name
                logger.info(f"Traitement de {channel_name}")

                channel = IPTVChannel(
                    channel_name,
                    str(channel_dir),
                    hls_cleaner=self.hls_cleaner,
                    use_gpu=self.use_gpu
                )
                self.channels[channel_name] = channel

                # D√©marrage direct
                if channel.processed_videos and channel.start_stream():
                    logger.info(f"‚úÖ Cha√Æne {channel_name} d√©marr√©e")
                    self.generate_master_playlist()
                else:
                    logger.error(f"‚ùå √âchec d√©marrage {channel_name}")
            except Exception as e:
                logger.error(f"Erreur {channel_dir.name}: {e}")

    def generate_master_playlist(self):
        try:
            playlist_path = os.path.abspath("/app/hls/playlist.m3u")
            logger.info(f"On g√©n√®re la master playlist: {playlist_path}")

            with open(playlist_path, "w", encoding="utf-8") as f:
                f.write("#EXTM3U\n")

                # On r√©f√©rence TOUTES les cha√Ænes self.channels
                for name, channel in sorted(self.channels.items()):
                    # Ajout direct dans la playlist, m√™me si FFmpeg n‚Äôest pas lanc√©
                    f.write(f'#EXTINF:-1 tvg-id="{name}" tvg-name="{name}",{name}\n')
                    f.write(f"http://{SERVER_URL}/hls/{name}/playlist.m3u8\n")

            logger.info(f"Playlist mise √† jour ({len(self.channels)} cha√Ænes)")
        except Exception as e:
            logger.error(f"Erreur g√©n√©ration master playlist: {e}")
            logger.error(traceback.format_exc())

    def _verify_channel(self, channel: IPTVChannel) -> bool:
        """# On v√©rifie si une cha√Æne produit des segments r√©cents"""
        try:
            if not self._is_channel_ready(channel.name):
                return False
            hls_dir = Path(f"/app/hls/{channel.name}")
            if not hls_dir.exists():
                return False
            ts_files = list(hls_dir.glob("*.ts"))
            if not ts_files:
                return False
            newest_ts = max(ts_files, key=lambda x: x.stat().st_mtime)
            if time.time() - newest_ts.stat().st_mtime > self.SEGMENT_AGE_THRESHOLD:
                return False
            return True
        except Exception as e:
            logger.error(f"Erreur v√©rification {channel.name}: {e}")
            return False

    def _is_channel_ready(self, channel_name: str) -> bool:
        """# On v√©rifie si une cha√Æne a des vid√©os trait√©es"""
        try:
            channel_dir = Path(f"/app/content/{channel_name}")
            processed_dir = channel_dir / "processed"
            if not processed_dir.exists():
                return False

            processed_videos = [
                f for f in processed_dir.glob("*.mp4") if not f.name.startswith("temp_")
            ]
            if not processed_videos:
                return False

            source_videos = [
                f for f in channel_dir.glob("*.*")
                if f.suffix.lower() in self.VIDEO_EXTENSIONS
                and not f.name.startswith("temp_")
                and f.parent == channel_dir
            ]
            processed_names = {v.stem for v in processed_videos}
            source_names = {v.stem for v in source_videos}
            return processed_names >= source_names and len(processed_videos) > 0
        except Exception as e:
            logger.error(f"Erreur is_channel_ready {channel_name}: {e}")
            return False

    def _update_channel_playlist(self, channel: IPTVChannel, channel_dir: Path):
        """# On met √† jour la playlist d'une cha√Æne existante"""
        try:
            new_videos = self._scan_new_videos(channel_dir)
            if not new_videos:
                logger.debug(f"Pas de nouveau contenu pour {channel.name}")
                return

            from video_processor import VideoProcessor
            processor = VideoProcessor(str(channel_dir), use_gpu=self.use_gpu)
            processor.process_videos_async()
            new_processed = processor.wait_for_completion()
            if not new_processed:
                logger.error(f"√âchec traitement nouveaux fichiers: {channel.name}")
                return

            channel.processed_videos.extend(new_processed)
            channel.processed_videos.sort()

            concat_file = channel._create_concat_file()
            if not concat_file:
                logger.error(f"√âchec cr√©ation concat file: {channel.name}")
                return

            logger.info(f"Playlist mise √† jour pour {channel.name}")
            if not self._verify_channel(channel):
                logger.warning(f"Probl√®me stream {channel.name}")
                if not channel.start_stream():
                    logger.error(f"√âchec red√©marrage {channel.name}")

        except Exception as e:
            logger.error(f"Erreur mise √† jour {channel.name}: {e}")
            logger.error(traceback.format_exc())

    def _scan_new_videos(self, channel_dir: Path) -> list:
        """# On d√©tecte les nouvelles vid√©os non encore trait√©es"""
        try:
            processed_dir = channel_dir / "processed"
            if not processed_dir.exists():
                return []
            current_videos = {f.stem for f in processed_dir.glob("*.mp4")}
            all_videos = {f.stem for f in channel_dir.glob("*.mp4")}
            new_videos = all_videos - current_videos
            return [channel_dir / f"{video}.mp4" for video in new_videos]
        except Exception as e:
            logger.error(f"Erreur scan nouveaux fichiers: {e}")
            return []

    def _clean_channel(self, channel_name: str):
        """# Nettoyage approfondi d'une cha√Æne"""
        try:
            self.hls_cleaner.cleanup_channel(channel_name)
            hls_dir = Path(f"/app/hls/{channel_name}")
            if hls_dir.exists():
                shutil.rmtree(hls_dir)
            hls_dir.mkdir(parents=True, exist_ok=True)

            channel_dir = Path(f"/app/content/{channel_name}")
            if channel_dir.exists():
                for pattern in ["_playlist.txt", "*.vtt", "temp_*"]:
                    for f in channel_dir.glob(pattern):
                        try:
                            f.unlink()
                        except Exception as e:
                            logger.error(f"Erreur suppression {f}: {e}")

            logger.info(f"Nettoyage termin√© pour {channel_name}")
        except Exception as e:
            logger.error(f"Erreur nettoyage {channel_name}: {e}")

    def _needs_update(self, channel_dir: Path) -> bool:
        """# On v√©rifie sommairement si un dossier a pu √™tre mis √† jour"""
        try:
            logger.debug(f"V√©rification mises √† jour: {channel_dir.name}")
            video_files = list(channel_dir.glob("*.mp4"))
            if not video_files:
                logger.debug(f"Aucun fichier dans {channel_dir.name}")
                return True
            return True
        except Exception as e:
            logger.error(f"Erreur needs_update {channel_dir}: {e}")
            return True

    def _master_playlist_loop(self):
        while True:
            try:
                self.generate_master_playlist()
                time.sleep(60)
            except Exception as e:
                logger.error(f"Erreur maj master playlist: {e}")

    def cleanup(self):
        logger.info("D√©but du nettoyage...")
        if hasattr(self, "hls_cleaner"):
            self.hls_cleaner.stop()

        if hasattr(self, "observer"):
            self.observer.stop()
            self.observer.join()

        for name, channel in self.channels.items():
            channel._clean_processes()

        logger.info("Nettoyage termin√©")

    def run(self):
        try:
            self.scan_channels()
            self.generate_master_playlist()
            self.observer.start()

            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            self.cleanup()
        except Exception as e:
            logger.error(f"üî• Erreur manager : {e}")
            self.cleanup()
            
    def _signal_handler(self, signum, frame):
        """# On g√®re les signaux syst√®me"""
        logger.info(f"Signal {signum} re√ßu, nettoyage...")
        self.cleanup()
        sys.exit(0)

    def _cpu_monitor(self):
        """# On surveille la CPU sur 1 minute"""
        usage_samples = []
        threshold = 90
        while True:
            try:
                usage = psutil.cpu_percent(interval=1)
                usage_samples.append(usage)
                if len(usage_samples) >= 60:
                    avg_usage = sum(usage_samples) / len(usage_samples)
                    if avg_usage > threshold:
                        logger.warning(
                            f"ALERTE CPU : moyenne {avg_usage:.1f}% sur 1 min"
                        )
                    usage_samples = []
            except Exception as e:
                logger.error(f"Erreur monitoring CPU : {e}")

    def _clean_directory(self, directory: Path):
        """# Nettoyage d'un dossier (non utilis√© directement)"""
        if not directory.exists():
            return
        for item in directory.glob("**/*"):
            try:
                if item.is_file():
                    item.unlink()
                elif item.is_dir():
                    shutil.rmtree(item)
            except Exception as e:
                logger.error(f"Erreur suppression {item}: {e}")

    import psutil
    import threading

    def monitor_ffmpeg(self):
        while True:
            if self.ffmpeg_process:
                if not psutil.pid_exists(self.ffmpeg_process.pid):
                    logger.warning(f"[{self.name}] ‚ö†Ô∏è FFmpeg s'est arr√™t√© ! Relance en cours...")
                    self.start_stream()
            time.sleep(30)  # V√©rifier toutes les 30 secondes

    def start_stream(self) -> bool:
        with self.lock:
            try:
                logger.info(f"[{self.name}] üîÑ D√©but du start_stream()")

                # Assurer que le dossier HLS existe
                hls_dir = f"/app/hls/{self.name}"
                if not os.path.exists(hls_dir):
                    logger.info(f"[{self.name}] üìÇ Cr√©ation du dossier HLS : {hls_dir}")
                    os.makedirs(hls_dir, exist_ok=True)

                # V√©rifier si _playlist.txt est bien g√©n√©r√©
                concat_file = self._create_concat_file()
                if not concat_file or not concat_file.exists():
                    logger.error(f"[{self.name}] ‚ùå _playlist.txt manquant, arr√™t du stream.")
                    return False

                # V√©rifier si les fichiers vid√©o existent bien
                for video in self.processed_videos:
                    if not os.path.exists(video):
                        logger.error(f"[{self.name}] ‚ùå Fichier vid√©o manquant : {video}")
                        return False

                # Lancer FFmpeg
                cmd = self._build_ffmpeg_command(hls_dir)
                logger.info(f"[{self.name}] üìù Commande FFmpeg : {' '.join(cmd)}")
                self.ffmpeg_process = self._start_ffmpeg_process(cmd)

                if not self.ffmpeg_process:
                    logger.error(f"[{self.name}] ‚ùå √âchec du d√©marrage de FFmpeg")
                    return False

                return True
            except Exception as e:
                logger.error(f"[{self.name}] ‚ùå Erreur critique dans start_stream : {e}")
                self._clean_processes()
                return False
