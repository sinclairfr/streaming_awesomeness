# iptv_manager.py
import os
import sys
import time
import glob
import shutil
import signal
import random
import psutil
import traceback
from queue import Queue
from pathlib import Path
from watchdog.events import FileSystemEventHandler
from watchdog.observers import Observer
import threading
from config import (
    logger,
    SERVER_URL,
    NGINX_ACCESS_LOG
)
from event_handler import ChannelEventHandler
from hls_cleaner import HLSCleaner
from client_monitor import ClientMonitor
from resource_monitor import ResourceMonitor
from iptv_channel import IPTVChannel
import os
from pathlib import Path
import subprocess  # Ajouter en haut du fichier
import signal
import os
from ffmpeg_monitor import FFmpegMonitor 
from dotenv import load_dotenv
# On charge les variables d'environnement
load_dotenv()

class IPTVManager:
    """
    # On g√®re toutes les cha√Ænes, le nettoyage HLS, la playlist principale, etc.
    """

    # Constantes
    VIDEO_EXTENSIONS = (".mp4", ".avi", ".mkv", ".mov")
    CPU_THRESHOLD = 85
    SEGMENT_AGE_THRESHOLD = 30  # En secondes
    

    def __init__(self, content_dir: str, use_gpu: bool = False):
        self.ensure_hls_directory()  # Sans argument pour le dossier principal
        
        self.content_dir = content_dir
        self.use_gpu = use_gpu
        self.channels = {}

        # Moniteur FFmpeg
        self.ffmpeg_monitor = FFmpegMonitor(self.channels)
        self.ffmpeg_monitor.start()

        # On initialise le nettoyeur HLS avec le bon chemin
        self.hls_cleaner = HLSCleaner("/app/hls")
        self.hls_cleaner.initial_cleanup()
        self.hls_cleaner.start()

        self.scan_lock = threading.Lock()
        self.failing_channels = set()

        logger.info("Initialisation du gestionnaire IPTV")
        self._clean_startup()

        # Observer
        self.observer = Observer()
        event_handler = ChannelEventHandler(self)
        self.observer.schedule(event_handler, self.content_dir, recursive=True)

        # On cr√©e tous les objets IPTVChannel mais SANS d√©marrer FFmpeg
        logger.info(f"Scan initial dans {self.content_dir}")
        self.scan_channels(initial=True, force=True)

        # Moniteur clients
        self.client_monitor = ClientMonitor(NGINX_ACCESS_LOG, self.update_watchers, self)
        self.client_monitor.start()

        # Moniteur ressources
        self.resource_monitor = ResourceMonitor()
        self.resource_monitor.start()

        # Thread de mise √† jour de la playlist ma√Ætre
        self.master_playlist_updater = threading.Thread(
            target=self._manage_master_playlist,
            daemon=True
        )
        self.master_playlist_updater.start()

        # Thread qui v√©rifie les watchers
        self.watchers_thread = threading.Thread(
            target=self._watchers_loop,
            daemon=True
        )
        self.watchers_thread.start()

    def _watchers_loop(self):
        TIMEOUT_NO_VIEWERS = int(os.getenv("TIMEOUT_NO_VIEWERS", "120"))  # Par d√©faut 60s
        """Surveille l'activit√© des watchers et arr√™te les streams inutilis√©s"""
        while True:
            try:
                current_time = time.time()
                
                # On maintient un dict des processus FFmpeg par cha√Æne
                ffmpeg_processes = {}
                
                # On scanne tous les processus
                for proc in psutil.process_iter(attrs=["pid", "name", "cmdline"]):
                    try:
                        if "ffmpeg" in proc.info["name"].lower():
                            if not proc.info.get("cmdline"):
                                continue
                                
                            # On ne garde que le premier match pour chaque processus
                            channel_found = False
                            cmd_str = " ".join(str(arg) for arg in proc.info["cmdline"])
                            for channel_name in self.channels:
                                if f"/hls/{channel_name}/" in cmd_str and not channel_found:
                                    channel_found = True
                                    if channel_name not in ffmpeg_processes:
                                        ffmpeg_processes[channel_name] = set()
                                    ffmpeg_processes[channel_name].add(proc.info["pid"])
                                    break  # On sort d√®s qu'on a trouv√© une cha√Æne
                                
                            # Si on n'a pas trouv√© de cha√Æne valide, c'est peut-√™tre un zombie
                            if not channel_found:
                                try:
                                    os.kill(proc.info["pid"], signal.SIGKILL)
                                    logger.info(f"üßπ Nettoyage processus zombie FFmpeg: {proc.info['pid']}")
                                except:
                                    pass
                                
                    except (psutil.NoSuchProcess, psutil.AccessDenied):
                        continue

                # Pour chaque cha√Æne, on v√©rifie l'√©tat
                for channel_name, channel in self.channels.items():
                    pids = ffmpeg_processes.get(channel_name, set())
                    if len(pids) > 1:  # Plus d'un processus FFmpeg
                        logger.warning(f"‚ö†Ô∏è {channel_name}: {len(pids)} processus FFmpeg actifs")
                        
                        # On garde le processus le plus r√©cent
                        newest_pid = max(pids, key=lambda pid: psutil.Process(pid).create_time())
                        logger.info(f"[{channel_name}] Conservation du processus le plus r√©cent: {newest_pid}")
                        
                        # On nettoie les autres
                        for pid in pids:
                            if pid != newest_pid:
                                logger.info(f"[{channel_name}] Nettoyage ancien processus: {pid}")
                                try:
                                    os.kill(pid, signal.SIGKILL)
                                except:
                                    pass

                    if channel.last_watcher_time and current_time - channel.last_watcher_time > TIMEOUT_NO_VIEWERS:
                        if channel.ffmpeg_process is not None:
                            logger.info(f"‚èπÔ∏è Arr√™t FFmpeg pour {channel_name} (inactif depuis {current_time - channel.last_watcher_time:.1f}s)")
                            channel._clean_processes()

                time.sleep(10)  # V√©rification toutes les 10s

            except Exception as e:
                logger.error(f"‚ùå Erreur watchers_loop: {e}")
                time.sleep(10)
               
    def update_watchers(self, channel_name: str, count: int, request_path: str):
        """Met √† jour les watchers en fonction des requ√™tes m3u8 et ts"""
        try:
            if channel_name not in self.channels:
                logger.error(f"‚ùå Cha√Æne inconnue: {channel_name}")
                return

            channel = self.channels[channel_name]
            
            # On v√©rifie si l'√©tat a vraiment chang√©
            if not hasattr(channel, '_last_update_state'):
                channel._last_update_state = {'count': -1, 'time': 0}
                
            current_time = time.time()
            
            # On √©vite les mises √† jour trop rapproch√©es avec les m√™mes valeurs
            if (count == channel._last_update_state['count'] and 
                current_time - channel._last_update_state['time'] < 1):
                return
                
            # On met √† jour l'√©tat
            channel._last_update_state['count'] = count
            channel._last_update_state['time'] = current_time
            
            old_count = channel.watchers_count
            channel.watchers_count = count

            if ".ts" in request_path:
                channel.last_segment_request = current_time

            # On ne log que si quelque chose a vraiment chang√©
            if old_count != count:
                logger.info(f"üìä Mise √† jour {channel_name}: {count} watchers")
                
                if old_count == 0 and count > 0:
                    logger.info(f"[{channel_name}] üî• APPEL de start_stream() (0 -> 1 watcher)")
                    if not channel.start_stream():
                        logger.error(f"[{channel_name}] ‚ùå √âchec d√©marrage stream")
                elif old_count > 0 and count == 0:
                    logger.info(f"[{channel_name}] üõë Plus aucun watcher, arr√™t du stream...")
                    channel.stop_stream_if_needed()

        except Exception as e:
            logger.error(f"‚ùå Erreur update_watchers: {e}")

    def _clean_startup(self):
        """# On nettoie avant de d√©marrer"""
        try:
            logger.info("üßπ Nettoyage initial...")
            patterns_to_clean = [
                ("/app/hls/**/*", "Fichiers HLS"),
                ("/app/content/**/_playlist.txt", "Playlists"),
                ("/app/content/**/*.vtt", "Fichiers VTT"),
                ("/app/content/**/temp_*", "Fichiers temporaires"),
            ]
            for pattern, desc in patterns_to_clean:
                count = 0
                for f in glob.glob(pattern, recursive=True):
                    try:
                        if os.path.isfile(f):
                            os.remove(f)
                        elif os.path.isdir(f):
                            shutil.rmtree(f)
                        count += 1
                    except Exception as e:
                        logger.error(f"Erreur nettoyage {f}: {e}")
                logger.info(f"‚ú® {count} {desc} supprim√©s")
            os.makedirs("/app/hls", exist_ok=True)
        except Exception as e:
            logger.error(f"Erreur nettoyage initial: {e}")

    def _start_channel(self, channel: IPTVChannel) -> bool:
        """# On tente de d√©marrer une cha√Æne"""
        try:
            if psutil.cpu_percent() > self.CPU_THRESHOLD:
                logger.warning(f"CPU trop charg√© pour {channel.name}")
                return False

            if not channel._scan_videos():
                logger.error(f"Aucune vid√©o valide pour {channel.name}")
                return False

            start_time = time.time()
            if not channel.start_stream():
                return False

            # On attend l'apparition des segments
            while time.time() - start_time < 10:
                if list(Path(f"/app/hls/{channel.name}").glob("*.ts")):
                    logger.info(f"‚úÖ Cha√Æne {channel.name} d√©marr√©e avec succ√®s")
                    return True
                time.sleep(0.5)

            logger.error(f"‚ùå Timeout d√©marrage {channel.name}")
            return False
        except Exception as e:
            logger.error(f"Erreur d√©marrage {channel.name}: {e}")
            return False

    def scan_channels(self, force: bool = False, initial: bool = False):
        """
        On scanne le contenu pour d√©tecter les nouveaux dossiers (cha√Ænes).
        """
        with self.scan_lock:
            try:
                content_path = Path(self.content_dir)
                if not content_path.exists():
                    logger.error(f"Le dossier {content_path} n'existe pas!")
                    return

                channel_dirs = [d for d in content_path.iterdir() if d.is_dir()]

                logger.info(f"üì° Scan des cha√Ænes disponibles...")
                for channel_dir in channel_dirs:
                    channel_name = channel_dir.name

                    if channel_name in self.channels:
                        logger.info(f"üîÑ Cha√Æne existante : {channel_name}")
                        continue

                    logger.info(f"‚úÖ Nouvelle cha√Æne trouv√©e : {channel_name}")
                    self.channels[channel_name] = IPTVChannel(
                        channel_name,
                        str(channel_dir),
                        hls_cleaner=self.hls_cleaner,
                        use_gpu=self.use_gpu
                    )

                logger.info(f"üì° Scan termin√©, {len(self.channels)} cha√Ænes enregistr√©es.")

            except Exception as e:
                logger.error(f"Erreur scan des cha√Ænes: {e}")

    def _start_ready_channel(self, channel: IPTVChannel):
        """# On d√©marre rapidement une cha√Æne d√©j√† pr√™te"""
        try:
            logger.info(f"D√©marrage rapide de la cha√Æne {channel.name}")
            if channel._scan_videos():
                if channel.start_stream():
                    logger.info(f"‚úÖ {channel.name} d√©marr√©e")
                    #self.generate_master_playlist()
                else:
                    logger.error(f"‚ùå √âchec d√©marrage {channel.name}")
            else:
                logger.error(f"‚ùå √âchec scan vid√©os {channel.name}")
        except Exception as e:
            logger.error(f"Erreur d√©marrage {channel.name}: {e}")

    def ensure_hls_directory(self, channel_name: str = None):
        """Cr√©e et configure les dossiers HLS avec les bonnes permissions"""
        try:
            # Dossier HLS principal
            base_hls = Path("/app/hls")
            if not base_hls.exists():
                logger.info("üìÇ Cr√©ation du dossier HLS principal...")
                base_hls.mkdir(parents=True, exist_ok=True)
                os.chmod(base_hls, 0o777)

            # Dossier sp√©cifique √† une cha√Æne si demand√©
            if channel_name:
                channel_hls = base_hls / channel_name
                if not channel_hls.exists():
                    logger.info(f"üìÇ Cr√©ation du dossier HLS pour {channel_name}")
                    channel_hls.mkdir(parents=True, exist_ok=True)
                    os.chmod(channel_hls, 0o777)
        except Exception as e:
            logger.error(f"‚ùå Erreur cr√©ation dossiers HLS: {e}")
            
    def _is_channel_ready(self, channel_name: str) -> bool:
        """# On v√©rifie si une cha√Æne a des vid√©os trait√©es"""
        try:
            channel_dir = Path(f"/app/content/{channel_name}")
            processed_dir = channel_dir / "processed"
            if not processed_dir.exists():
                return False

            processed_videos = [
                f for f in processed_dir.glob("*.mp4") if not f.name.startswith("temp_")
            ]
            if not processed_videos:
                return False

            source_videos = [
                f for f in channel_dir.glob("*.*")
                if f.suffix.lower() in self.VIDEO_EXTENSIONS
                and not f.name.startswith("temp_")
                and f.parent == channel_dir
            ]
            processed_names = {v.stem for v in processed_videos}
            source_names = {v.stem for v in source_videos}
            return processed_names >= source_names and len(processed_videos) > 0
        except Exception as e:
            logger.error(f"Erreur is_channel_ready {channel_name}: {e}")
            return False

    def _update_channel_playlist(self, channel: IPTVChannel, channel_dir: Path):
        """# On met √† jour la playlist d'une cha√Æne existante"""
        try:
            new_videos = self._scan_new_videos(channel_dir)
            if not new_videos:
                logger.debug(f"Pas de nouveau contenu pour {channel.name}")
                return

            from video_processor import VideoProcessor
            processor = VideoProcessor(str(channel_dir), use_gpu=self.use_gpu)
            processor.process_videos_async()
            new_processed = processor.wait_for_completion()
            if not new_processed:
                logger.error(f"√âchec traitement nouveaux fichiers: {channel.name}")
                return

            channel.processed_videos.extend(new_processed)
            channel.processed_videos.sort()

            concat_file = channel._create_concat_file()
            if not concat_file:
                logger.error(f"√âchec cr√©ation concat file: {channel.name}")
                return

        except Exception as e:
            logger.error(f"Erreur mise √† jour {channel.name}: {e}")
            logger.error(traceback.format_exc())

    def _scan_new_videos(self, channel_dir: Path) -> list:
        """# On d√©tecte les nouvelles vid√©os non encore trait√©es"""
        try:
            processed_dir = channel_dir / "processed"
            if not processed_dir.exists():
                return []
            current_videos = {f.stem for f in processed_dir.glob("*.mp4")}
            all_videos = {f.stem for f in channel_dir.glob("*.mp4")}
            new_videos = all_videos - current_videos
            return [channel_dir / f"{video}.mp4" for video in new_videos]
        except Exception as e:
            logger.error(f"Erreur scan nouveaux fichiers: {e}")
            return []

    def _clean_channel(self, channel_name: str):
        """# Nettoyage approfondi d'une cha√Æne"""
        try:
            self.hls_cleaner.cleanup_channel(channel_name)
            hls_dir = Path(f"/app/hls/{channel_name}")
            if hls_dir.exists():
                shutil.rmtree(hls_dir)
            hls_dir.mkdir(parents=True, exist_ok=True)

            channel_dir = Path(f"/app/content/{channel_name}")
            if channel_dir.exists():
                for pattern in ["_playlist.txt", "*.vtt", "temp_*"]:
                    for f in channel_dir.glob(pattern):
                        try:
                            f.unlink()
                        except Exception as e:
                            logger.error(f"Erreur suppression {f}: {e}")

            logger.info(f"Nettoyage termin√© pour {channel_name}")
        except Exception as e:
            logger.error(f"Erreur nettoyage {channel_name}: {e}")

    def _needs_update(self, channel_dir: Path) -> bool:
        """# On v√©rifie sommairement si un dossier a pu √™tre mis √† jour"""
        try:
            logger.debug(f"V√©rification mises √† jour: {channel_dir.name}")
            video_files = list(channel_dir.glob("*.mp4"))
            if not video_files:
                logger.info(f"Aucun fichier dans {channel_dir.name}")
                return True
            return True
        except Exception as e:
            logger.error(f"Erreur needs_update {channel_dir}: {e}")
            return True

    def _manage_master_playlist(self):
        """
        # On g√®re la cr√©ation et mise √† jour de la playlist principale.
        # Cette m√©thode tourne en boucle et reg√©n√®re la playlist toutes les 60s.
        """
        while True:
            try:
                playlist_path = os.path.abspath("/app/hls/playlist.m3u")
                logger.info(f"On g√©n√®re la master playlist: {playlist_path}")

                with open(playlist_path, "w", encoding="utf-8") as f:
                    f.write("#EXTM3U\n")

                    # On r√©f√©rence TOUTES les cha√Ænes self.channels
                    for name, channel in sorted(self.channels.items()):
                        f.write(f'#EXTINF:-1 tvg-id="{name}" tvg-name="{name}",{name}\n')
                        f.write(f"http://{SERVER_URL}/hls/{name}/playlist.m3u8\n")

                logger.info(f"Playlist mise √† jour ({len(self.channels)} cha√Ænes)")
                time.sleep(60)  # On attend 60s avant la prochaine mise √† jour
                
            except Exception as e:
                logger.error(f"Erreur maj master playlist: {e}")
                logger.error(traceback.format_exc())
                time.sleep(60)  # On attend m√™me en cas d'erreur

    def cleanup(self):
        logger.info("D√©but du nettoyage...")
        if hasattr(self, "hls_cleaner"):
            self.hls_cleaner.stop()

        if hasattr(self, "observer"):
            self.observer.stop()
            self.observer.join()

        for name, channel in self.channels.items():
            channel._clean_processes()

        logger.info("Nettoyage termin√©")
        
    def _signal_handler(self, signum, frame):
        """# On g√®re les signaux syst√®me"""
        logger.info(f"Signal {signum} re√ßu, nettoyage...")
        self.cleanup()
        sys.exit(0)

    def run(self):
        try:
            logger.debug("üì• Scan initial des cha√Ænes...")
            self.scan_channels()
            logger.debug("üïµÔ∏è D√©marrage de l'observer...")
            self.observer.start()

            # Debug du client_monitor
            logger.debug("üöÄ D√©marrage du client_monitor...")
            if not hasattr(self, 'client_monitor') or not self.client_monitor.is_alive():
                logger.error("‚ùå client_monitor n'est pas d√©marr√©!")
                
            while True:
                time.sleep(1)
                
        except KeyboardInterrupt:
            self.cleanup()
        except Exception as e:
            logger.error(f"üî• Erreur manager : {e}")
            self.cleanup()