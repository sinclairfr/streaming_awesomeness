# iptv_manager.py
import os
import sys
import time
import glob
import shutil
import signal
import random
import psutil
import threading
import traceback
from queue import Queue
from pathlib import Path
from watchdog.observers import Observer

from config import (
    logger,
    SERVER_URL,
    NGINX_ACCESS_LOG
)
from event_handler import ChannelEventHandler
from hls_cleaner import HLSCleaner
from client_monitor import ClientMonitor
from resource_monitor import ResourceMonitor
from iptv_channel import IPTVChannel

class IPTVManager:
    """
    # On g√®re toutes les cha√Ænes, le nettoyage HLS, la playlist principale, etc.
    """

    # Constantes
    VIDEO_EXTENSIONS = (".mp4", ".avi", ".mkv", ".mov")
    CPU_THRESHOLD = 85
    SEGMENT_AGE_THRESHOLD = 30  # En secondes

    def __init__(self, content_dir: str, use_gpu: bool = False):
        self.content_dir = content_dir
        self.use_gpu = use_gpu
        self.channels = {}

        # On cr√©e un nettoyeur HLS unique
        self.hls_cleaner = HLSCleaner("./hls")
        self.hls_cleaner.initial_cleanup()
        self.hls_cleaner.start()

        self.scan_lock = threading.Lock()
        self.failing_channels = set()
        self.channel_queue = Queue()

        logger.info("Initialisation du gestionnaire IPTV")
        self._clean_startup()

        # Thread de traitement de la file d'attente de cha√Ænes
        self.queue_processor = threading.Thread(
            target=self._process_channel_queue,
            daemon=True
        )
        self.queue_processor.start()

        # On param√®tre l'observer pour d√©tecter les changements de contenu
        self.observer = Observer()
        event_handler = ChannelEventHandler(self)
        self.observer.schedule(event_handler, self.content_dir, recursive=True)

        # Scan initial du contenu
        logger.info(f"Scan initial dans {self.content_dir}")
        self.scan_channels(initial=True, force=True)

        # Moniteur clients
        self.client_monitor = ClientMonitor(NGINX_ACCESS_LOG)
        self.client_monitor.start()

        # Moniteur ressources
        self.resource_monitor = ResourceMonitor()
        self.resource_monitor.start()

        # Thread de mise √† jour de la playlist ma√Ætre
        self.master_playlist_updater = threading.Thread(
            target=self._master_playlist_loop,
            daemon=True
        )
        self.master_playlist_updater.start()

    def _clean_startup(self):
        """# On nettoie avant de d√©marrer"""
        try:
            logger.info("üßπ Nettoyage initial...")
            patterns_to_clean = [
                ("./hls/**/*", "Fichiers HLS"),
                ("./content/**/_playlist.txt", "Playlists"),
                ("./content/**/*.vtt", "Fichiers VTT"),
                ("./content/**/temp_*", "Fichiers temporaires"),
            ]
            for pattern, desc in patterns_to_clean:
                count = 0
                for f in glob.glob(pattern, recursive=True):
                    try:
                        if os.path.isfile(f):
                            os.remove(f)
                        elif os.path.isdir(f):
                            shutil.rmtree(f)
                        count += 1
                    except Exception as e:
                        logger.error(f"Erreur nettoyage {f}: {e}")
                logger.info(f"‚ú® {count} {desc} supprim√©s")
            os.makedirs("./hls", exist_ok=True)
        except Exception as e:
            logger.error(f"Erreur nettoyage initial: {e}")

    def _process_channel_queue(self):
        """# On traite la file d'attente (channels) en v√©rifiant les ressources"""
        while True:
            try:
                channel = self.channel_queue.get()
                cpu_usage = psutil.cpu_percent()
                if cpu_usage > self.CPU_THRESHOLD:
                    logger.warning(
                        f"CPU trop charg√© ({cpu_usage}%), on retarde {channel.name}"
                    )
                    time.sleep(10)
                    self.channel_queue.put(channel)
                    continue

                if channel.name in self.failing_channels:
                    logger.info(f"Cha√Æne {channel.name} en √©chec, nettoyage...")
                    self._clean_channel(channel.name)

                success = self._start_channel(channel)
                if not success:
                    self.failing_channels.add(channel.name)
                else:
                    self.failing_channels.discard(channel.name)
            except Exception as e:
                logger.error(f"Erreur file d'attente: {e}")
            finally:
                self.channel_queue.task_done()

    def _start_channel(self, channel: IPTVChannel) -> bool:
        """# On tente de d√©marrer une cha√Æne"""
        try:
            if psutil.cpu_percent() > self.CPU_THRESHOLD:
                logger.warning(f"CPU trop charg√© pour {channel.name}")
                return False

            if not channel._scan_videos():
                logger.error(f"Aucune vid√©o valide pour {channel.name}")
                return False

            start_time = time.time()
            if not channel.start_stream():
                return False

            # On attend l'apparition des segments
            while time.time() - start_time < 10:
                if list(Path(f"./hls/{channel.name}").glob("*.ts")):
                    logger.info(f"‚úÖ Cha√Æne {channel.name} d√©marr√©e avec succ√®s")
                    return True
                time.sleep(0.5)

            logger.error(f"‚ùå Timeout d√©marrage {channel.name}")
            return False
        except Exception as e:
            logger.error(f"Erreur d√©marrage {channel.name}: {e}")
            return False

    def scan_channels(self, force: bool = False, initial: bool = False):
        """# On scanne les dossiers de cha√Ænes et lance le traitement"""
        with self.scan_lock:
            try:
                content_path = Path(self.content_dir)
                if not content_path.exists():
                    logger.error(f"Le dossier {content_path} n'existe pas!")
                    return

                channel_dirs = [d for d in content_path.iterdir() if d.is_dir()]
                processing_queue = []

                for channel_dir in channel_dirs:
                    channel_name = channel_dir.name
                    processed_dir = channel_dir / "processed"
                    if processed_dir.exists() and list(processed_dir.glob("*.mp4")):
                        if channel_name not in self.channels:
                            channel = IPTVChannel(
                                channel_name,
                                str(channel_dir),
                                hls_cleaner=self.hls_cleaner,
                                use_gpu=self.use_gpu
                            )
                            self.channels[channel_name] = channel
                            threading.Thread(
                                target=self._start_ready_channel,
                                args=(channel,)
                            ).start()
                        else:
                            if force or initial or self._needs_update(channel_dir):
                                channel = self.channels[channel_name]
                                threading.Thread(
                                    target=self._update_channel_playlist,
                                    args=(channel, channel_dir)
                                ).start()
                    else:
                        processing_queue.append(channel_dir)

                if processing_queue:
                    threading.Thread(
                        target=self._process_new_channels,
                        args=(processing_queue,)
                    ).start()
            except Exception as e:
                logger.error(f"Erreur scan des cha√Ænes: {e}")

    def _start_ready_channel(self, channel: IPTVChannel):
        """# On d√©marre rapidement une cha√Æne d√©j√† pr√™te"""
        try:
            logger.info(f"D√©marrage rapide de la cha√Æne {channel.name}")
            if channel._scan_videos():
                if channel.start_stream():
                    logger.info(f"‚úÖ {channel.name} d√©marr√©e")
                    self.generate_master_playlist()
                else:
                    logger.error(f"‚ùå √âchec d√©marrage {channel.name}")
            else:
                logger.error(f"‚ùå √âchec scan vid√©os {channel.name}")
        except Exception as e:
            logger.error(f"Erreur d√©marrage {channel.name}: {e}")

    def _process_new_channels(self, channel_dirs):
        """# On traite de nouvelles cha√Ænes sans vid√©o trait√©e"""
        for channel_dir in channel_dirs:
            try:
                channel_name = channel_dir.name
                logger.info(f"Traitement de {channel_name}")

                channel = IPTVChannel(
                    channel_name,
                    str(channel_dir),
                    hls_cleaner=self.hls_cleaner,
                    use_gpu=self.use_gpu
                )
                self.channels[channel_name] = channel

                # D√©marrage direct
                if channel.processed_videos and channel.start_stream():
                    logger.info(f"‚úÖ Cha√Æne {channel_name} d√©marr√©e")
                    self.generate_master_playlist()
                else:
                    logger.error(f"‚ùå √âchec d√©marrage {channel_name}")
            except Exception as e:
                logger.error(f"Erreur {channel_dir.name}: {e}")

    def generate_master_playlist(self):
        """# On g√©n√®re la playlist principale avec les cha√Ænes pr√™tes"""
        try:
            playlist_path = os.path.abspath("./hls/playlist.m3u")
            logger.info(f"On g√©n√®re la master playlist: {playlist_path}")

            ready_channels = []
            for name, channel in sorted(self.channels.items()):
                if self._verify_channel(channel):
                    ready_channels.append(name)
                    logger.info(f"Cha√Æne {name} pr√™te")
                else:
                    logger.debug(f"{name} pas pr√™te")
                    if name not in self.failing_channels:
                        self.channel_queue.put(channel)

            with open(playlist_path, "w", encoding="utf-8") as f:
                f.write("#EXTM3U\n")
                for name in ready_channels:
                    f.write(f'#EXTINF:-1 tvg-id="{name}" tvg-name="{name}",{name}\n')
                    f.write(f"http://{SERVER_URL}/hls/{name}/playlist.m3u8\n")

            logger.info(f"Playlist mise √† jour ({len(ready_channels)} cha√Ænes)")
        except Exception as e:
            logger.error(f"Erreur g√©n√©ration master playlist: {e}")
            logger.error(traceback.format_exc())

    def _verify_channel(self, channel: IPTVChannel) -> bool:
        """# On v√©rifie si une cha√Æne produit des segments r√©cents"""
        try:
            if not self._is_channel_ready(channel.name):
                return False
            hls_dir = Path(f"./hls/{channel.name}")
            if not hls_dir.exists():
                return False
            ts_files = list(hls_dir.glob("*.ts"))
            if not ts_files:
                return False
            newest_ts = max(ts_files, key=lambda x: x.stat().st_mtime)
            if time.time() - newest_ts.stat().st_mtime > self.SEGMENT_AGE_THRESHOLD:
                return False
            return True
        except Exception as e:
            logger.error(f"Erreur v√©rification {channel.name}: {e}")
            return False

    def _is_channel_ready(self, channel_name: str) -> bool:
        """# On v√©rifie si une cha√Æne a des vid√©os trait√©es"""
        try:
            channel_dir = Path(f"./content/{channel_name}")
            processed_dir = channel_dir / "processed"
            if not processed_dir.exists():
                return False

            processed_videos = [
                f for f in processed_dir.glob("*.mp4") if not f.name.startswith("temp_")
            ]
            if not processed_videos:
                return False

            source_videos = [
                f for f in channel_dir.glob("*.*")
                if f.suffix.lower() in self.VIDEO_EXTENSIONS
                and not f.name.startswith("temp_")
                and f.parent == channel_dir
            ]
            processed_names = {v.stem for v in processed_videos}
            source_names = {v.stem for v in source_videos}
            return processed_names >= source_names and len(processed_videos) > 0
        except Exception as e:
            logger.error(f"Erreur is_channel_ready {channel_name}: {e}")
            return False

    def _update_channel_playlist(self, channel: IPTVChannel, channel_dir: Path):
        """# On met √† jour la playlist d'une cha√Æne existante"""
        try:
            new_videos = self._scan_new_videos(channel_dir)
            if not new_videos:
                logger.debug(f"Pas de nouveau contenu pour {channel.name}")
                return

            from video_processor import VideoProcessor
            processor = VideoProcessor(str(channel_dir), use_gpu=self.use_gpu)
            processor.process_videos_async()
            new_processed = processor.wait_for_completion()
            if not new_processed:
                logger.error(f"√âchec traitement nouveaux fichiers: {channel.name}")
                return

            channel.processed_videos.extend(new_processed)
            channel.processed_videos.sort()

            concat_file = channel._create_concat_file()
            if not concat_file:
                logger.error(f"√âchec cr√©ation concat file: {channel.name}")
                return

            logger.info(f"Playlist mise √† jour pour {channel.name}")
            if not self._verify_channel(channel):
                logger.warning(f"Probl√®me stream {channel.name}")
                if not channel.start_stream():
                    logger.error(f"√âchec red√©marrage {channel.name}")

        except Exception as e:
            logger.error(f"Erreur mise √† jour {channel.name}: {e}")
            logger.error(traceback.format_exc())

    def _scan_new_videos(self, channel_dir: Path) -> list:
        """# On d√©tecte les nouvelles vid√©os non encore trait√©es"""
        try:
            processed_dir = channel_dir / "processed"
            if not processed_dir.exists():
                return []
            current_videos = {f.stem for f in processed_dir.glob("*.mp4")}
            all_videos = {f.stem for f in channel_dir.glob("*.mp4")}
            new_videos = all_videos - current_videos
            return [channel_dir / f"{video}.mp4" for video in new_videos]
        except Exception as e:
            logger.error(f"Erreur scan nouveaux fichiers: {e}")
            return []

    def _clean_channel(self, channel_name: str):
        """# Nettoyage approfondi d'une cha√Æne"""
        try:
            self.hls_cleaner.cleanup_channel(channel_name)
            hls_dir = Path(f"./hls/{channel_name}")
            if hls_dir.exists():
                shutil.rmtree(hls_dir)
            hls_dir.mkdir(parents=True, exist_ok=True)

            channel_dir = Path(f"./content/{channel_name}")
            if channel_dir.exists():
                for pattern in ["_playlist.txt", "*.vtt", "temp_*"]:
                    for f in channel_dir.glob(pattern):
                        try:
                            f.unlink()
                        except Exception as e:
                            logger.error(f"Erreur suppression {f}: {e}")

            logger.info(f"Nettoyage termin√© pour {channel_name}")
        except Exception as e:
            logger.error(f"Erreur nettoyage {channel_name}: {e}")

    def _needs_update(self, channel_dir: Path) -> bool:
        """# On v√©rifie sommairement si un dossier a pu √™tre mis √† jour"""
        try:
            logger.debug(f"V√©rification mises √† jour: {channel_dir.name}")
            video_files = list(channel_dir.glob("*.mp4"))
            if not video_files:
                logger.debug(f"Aucun fichier dans {channel_dir.name}")
                return True
            return True
        except Exception as e:
            logger.error(f"Erreur needs_update {channel_dir}: {e}")
            return True

    def _master_playlist_loop(self):
        """# Boucle de mise √† jour continue de la playlist"""
        while True:
            try:
                self.generate_master_playlist()
                time.sleep(60)
            except Exception as e:
                logger.error(f"Erreur maj master playlist: {e}")

    def cleanup(self):
        """# On arr√™te le nettoyeur, l'observer et on nettoie tout"""
        logger.info("D√©but du nettoyage...")
        if hasattr(self, "hls_cleaner"):
            logger.info("Arr√™t du nettoyeur HLS...")
            self.hls_cleaner.stop()

        if hasattr(self, "observer"):
            logger.info("On arr√™te l'observer...")
            self.observer.stop()
            self.observer.join()

        for name, channel in self.channels.items():
            logger.info(f"Nettoyage canal {name}...")
            channel._clean_processes()

        logger.info("Nettoyage termin√©")

    def _signal_handler(self, signum, frame):
        """# On g√®re les signaux syst√®me"""
        logger.info(f"Signal {signum} re√ßu, nettoyage...")
        self.cleanup()
        sys.exit(0)

    def run(self):
        """# On ex√©cute la boucle principale"""
        try:
            self.scan_channels()
            self.generate_master_playlist()
            self.observer.start()

            cpu_thread = threading.Thread(target=self._cpu_monitor, daemon=True)
            cpu_thread.start()

            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            self.cleanup()
        except Exception as e:
            logger.error(f"üî• Erreur dans le gestionnaire IPTV : {e}")
            self.cleanup()

    def _cpu_monitor(self):
        """# On surveille la CPU sur 1 minute"""
        usage_samples = []
        threshold = 90
        while True:
            try:
                usage = psutil.cpu_percent(interval=1)
                usage_samples.append(usage)
                if len(usage_samples) >= 60:
                    avg_usage = sum(usage_samples) / len(usage_samples)
                    if avg_usage > threshold:
                        logger.warning(
                            f"ALERTE CPU : moyenne {avg_usage:.1f}% sur 1 min"
                        )
                    usage_samples = []
            except Exception as e:
                logger.error(f"Erreur monitoring CPU : {e}")

    def _clean_directory(self, directory: Path):
        """# Nettoyage d'un dossier (non utilis√© directement)"""
        if not directory.exists():
            return
        for item in directory.glob("**/*"):
            try:
                if item.is_file():
                    item.unlink()
                elif item.is_dir():
                    shutil.rmtree(item)
            except Exception as e:
                logger.error(f"Erreur suppression {item}: {e}")

