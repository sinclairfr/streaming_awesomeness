# iptv_channel.py
import os
import time
import threading
from pathlib import Path
from typing import Optional, List
import shutil
import json
from video_processor import VideoProcessor
from hls_cleaner import HLSCleaner
from ffmpeg_logger import FFmpegLogger
from stream_error_handler import StreamErrorHandler
from mkv_handler import MKVHandler
from ffmpeg_command_builder import FFmpegCommandBuilder
from ffmpeg_process_manager import FFmpegProcessManager
from playback_position_manager import PlaybackPositionManager
import subprocess
import re
from config import (
    TIMEOUT_NO_VIEWERS,
    logger,
    CONTENT_DIR,
    USE_GPU,
)

class IPTVChannel:
    """G√®re une cha√Æne IPTV, son streaming et sa surveillance"""

    def __init__(
        self,
        name: str,
        video_dir: str,
        hls_cleaner: HLSCleaner,
        use_gpu: bool = False
    ):
        self.name = name
        self.video_dir = video_dir
        self.use_gpu = use_gpu
        self.hls_cleaner = hls_cleaner
        self.error_handler = StreamErrorHandler(self.name)
        self.lock = threading.Lock()
        self.ready_for_streaming = False  # Indique si la cha√Æne est pr√™te

        # Initialisation des managers
        self.logger = FFmpegLogger(name)
        self.command_builder = FFmpegCommandBuilder(name, use_gpu=use_gpu) 
        self.process_manager = FFmpegProcessManager(name, self.logger)
        self.position_manager = PlaybackPositionManager(name)
        
        # Configuration des callbacks
        self.process_manager.on_process_died = self._handle_process_died
        self.process_manager.on_position_update = self._handle_position_update
        self.process_manager.on_segment_created = self._handle_segment_created

        # Autres composants
        self.processor = VideoProcessor(self.video_dir)
        self.mkv_handler = MKVHandler(self.name, logger)
        
        # Variables de surveillance
        self.processed_videos = []
        self.watchers_count = 0
        self.last_watcher_time = time.time()
        self.last_segment_time = time.time()
        
        # √âtat du scan initial
        self.initial_scan_complete = False
        self.scan_lock = threading.Lock()

        # Scan initial des vid√©os
        threading.Thread(target=self._scan_videos_async, daemon=True).start()

    def _scan_videos_async(self):
        """Scanne les vid√©os en t√¢che de fond pour ne pas bloquer"""
        try:
            with self.scan_lock:
                logger.info(f"[{self.name}] üîç Scan initial des vid√©os en cours...")
                self._scan_videos()
                
                # Calcul de la dur√©e totale
                total_duration = self._calculate_total_duration()
                self.position_manager.set_total_duration(total_duration)
                self.process_manager.set_total_duration(total_duration)
                
                self.initial_scan_complete = True
                self.ready_for_streaming = len(self.processed_videos) > 0
                
                logger.info(f"[{self.name}] ‚úÖ Scan initial termin√©. Cha√Æne pr√™te: {self.ready_for_streaming}")
        except Exception as e:
            logger.error(f"[{self.name}] ‚ùå Erreur scan initial: {e}")
            self.initial_scan_complete = True  # Pour ne pas bloquer ind√©finiment
            self.ready_for_streaming = False

    def _calculate_total_duration(self) -> float:
        """Calcule la dur√©e totale en utilisant le PositionManager"""
        try:
            total_duration = self.position_manager.calculate_durations(self.processed_videos)
            if total_duration <= 0:
                logger.warning(f"[{self.name}] ‚ö†Ô∏è Dur√©e totale invalide, fallback √† 120s")
                return 120.0
                
            return total_duration
        except Exception as e:
            logger.error(f"[{self.name}] ‚ùå Erreur calcul dur√©e: {e}")
            return 120.0

    def _check_segments(self, hls_dir: str) -> bool:
        """V√©rifie la g√©n√©ration des segments HLS"""
        try:
            segment_log_path = Path(f"/app/logs/segments/{self.name}_segments.log")
            segment_log_path.parent.mkdir(parents=True, exist_ok=True)
            
            hls_path = Path(hls_dir)
            playlist = hls_path / "playlist.m3u8"
            
            if not playlist.exists():
                logger.error(f"[{self.name}] ‚ùå playlist.m3u8 introuvable")
                return False
                
            with open(playlist) as f:
                segments = [line.strip() for line in f if line.strip().endswith('.ts')]
                
            if not segments:
                logger.warning(f"[{self.name}] ‚ö†Ô∏è Aucun segment dans la playlist")
                return False
                
            current_time = time.strftime("%Y-%m-%d %H:%M:%S")
            log_entry = f"{current_time} - Segments actifs: {len(segments)}\n"
            
            for segment in segments:
                segment_path = hls_path / segment
                if segment_path.exists():
                    size = segment_path.stat().st_size
                    mtime = time.strftime("%H:%M:%S", time.localtime(segment_path.stat().st_mtime))
                    log_entry += f"  - {segment} (Size: {size/1024:.1f}KB, Modified: {mtime})\n"
                else:
                    log_entry += f"  - {segment} (MISSING)\n"
                    
            with open(segment_log_path, "a") as f:
                f.write(log_entry)
                f.write("-" * 80 + "\n")
                
            return True
            
        except Exception as e:
            logger.error(f"[{self.name}] Erreur v√©rification segments: {e}")
            return False

    def _handle_timeouts(self, current_time, crash_threshold):
        """G√®re les timeouts et red√©marre le stream si n√©cessaire"""
        if current_time - self.last_segment_time > crash_threshold:
            logger.error(f"üî• Pas de nouveau segment pour {self.name} depuis {current_time - self.last_segment_time:.1f}s")
            if self.error_handler.add_error("segment_timeout"):
                if self._restart_stream():
                    self.error_handler.reset()
                return True
        return False

    def _check_viewer_inactivity(self, current_time, timeout):
        """V√©rifie l'inactivit√© des viewers et g√®re l'arr√™t du stream"""
        if not self.process_manager.is_running():
            return False

        inactivity_duration = current_time - self.last_watcher_time
        
        if inactivity_duration > timeout + 60:  
            logger.info(f"[{self.name}] ‚ö†Ô∏è Inactivit√© d√©tect√©e: {inactivity_duration:.1f}s")
            return True
            
        return False
    
    def _clean_processes(self):
        """Nettoie les processus en utilisant le ProcessManager"""
        try:
            self.position_manager.save_position()
            self.process_manager.stop_process()
            logger.info(f"[{self.name}] üßπ Nettoyage des processus termin√©")
        except Exception as e:
            logger.error(f"[{self.name}] ‚ùå Erreur nettoyage processus: {e}")              
    
    def _get_accurate_duration(self, video_path: Path) -> float:
        """
        Obtient la dur√©e pr√©cise d'un fichier vid√©o avec plusieurs tentatives
        et cache des r√©sultats pour performance
        """
        # Utilisation d'un cache interne
        if not hasattr(self, '_duration_cache'):
            self._duration_cache = {}
            
        video_str = str(video_path)
        if video_str in self._duration_cache:
            return self._duration_cache[video_str]
            
        max_retries = 3
        for attempt in range(max_retries):
            try:
                # Param√®tres plus robustes pour ffprobe
                cmd = [
                    "ffprobe",
                    "-v", "error",
                    "-analyzeduration", "100M",  # Augmente le temps d'analyse
                    "-probesize", "100M",        # Et la taille analys√©e
                    "-i", str(video_path),       # Explicite le fichier d'entr√©e
                    "-show_entries", "format=duration",
                    "-of", "default=noprint_wrappers=1:nokey=1"
                ]
                
                logger.warning(f"[{self.name}] ‚ö†Ô∏è Tentative {attempt+1}/{max_retries} pour {video_path}")
                
                result = subprocess.run(cmd, capture_output=True, text=True)
                
                if result.returncode == 0 and result.stdout.strip():
                    try:
                        duration = float(result.stdout.strip())
                        if duration > 0:
                            # Arrondir √† 3 d√©cimales pour √©viter erreurs d'impr√©cision
                            duration = round(duration, 3)
                            self._duration_cache[video_str] = duration
                            return duration
                    except ValueError:
                        logger.error(f"[{self.name}] ‚ùå Valeur non num√©rique: {result.stdout}")
                else:
                    # Log plus verbeux de l'erreur
                    if result.stderr:
                        logger.error(f"[{self.name}] ‚ùå Erreur ffprobe: {result.stderr}")
                    else:
                        logger.error(f"[{self.name}] ‚ùå √âchec sans message d'erreur, code: {result.returncode}")
                
                # Alternative avec approche diff√©rente si √©choue
                if attempt == max_retries - 2:  # Avant-derni√®re tentative
                    try:
                        alternate_cmd = [
                            "ffmpeg", "-i", str(video_path), 
                            "-f", "null", "-"
                        ]
                        
                        # Ex√©cute ffmpeg pour lire le fichier entier
                        alt_result = subprocess.run(
                            alternate_cmd,
                            capture_output=True,
                            text=True
                        )
                        
                        # Cherche la dur√©e dans la sortie d'erreur
                        if alt_result.stderr:
                            duration_match = re.search(r'Duration: (\d{2}):(\d{2}):(\d{2})\.(\d{2})', alt_result.stderr)
                            if duration_match:
                                h, m, s, ms = map(int, duration_match.groups())
                                duration = h * 3600 + m * 60 + s + ms / 100
                                self._duration_cache[video_str] = duration
                                return duration
                    except Exception as e:
                        logger.error(f"[{self.name}] ‚ùå Erreur m√©thode alternative: {e}")
                
                # Pause entre les tentatives
                import time
                time.sleep(0.5)
                
            except Exception as e:
                logger.error(f"[{self.name}] ‚ùå Erreur ffprobe dur√©e {video_path.name}: {e}")
        
        # Valeur par d√©faut si impossible de d√©terminer la dur√©e
        logger.error(f"[{self.name}] ‚ùå Impossible d'obtenir la dur√©e pour {video_path.name}, utilisation valeur par d√©faut")
        default_duration = 3600.0  # 1 heure par d√©faut
        self._duration_cache[video_str] = default_duration
        return default_duration  

    def _create_concat_file(self) -> Optional[Path]:
        """Cr√©e le fichier de concat√©nation avec les bons chemins"""
        try:
            logger.info(f"[{self.name}] üõ†Ô∏è Cr√©ation de _playlist.txt")

            # Utiliser ready_to_stream au lieu de processed
            ready_to_stream_dir = Path(self.video_dir) / "ready_to_stream"
            if not ready_to_stream_dir.exists():
                logger.error(f"[{self.name}] ‚ùå Dossier ready_to_stream introuvable")
                return None
                
            concat_file = Path(self.video_dir) / "_playlist.txt"

            # Ne prendre que les fichiers .mp4 (pas de .mkv)
            ready_files = sorted(ready_to_stream_dir.glob("*.mp4"))
            if not ready_files:
                logger.error(f"[{self.name}] ‚ùå Aucune vid√©o dans {ready_to_stream_dir}")
                return None

            logger.info(f"[{self.name}] üìù √âcriture de _playlist.txt")

            with open(concat_file, "w", encoding="utf-8") as f:
                for video in ready_files:
                    escaped_path = str(video.absolute()).replace("'", "'\\''")
                    f.write(f"file '{escaped_path}'\n")
                    logger.info(f"[{self.name}] ‚úÖ Ajout de {video.name}")

            logger.info(f"[{self.name}] üé• Playlist cr√©√©e avec {len(ready_files)} fichiers")
            return concat_file

        except Exception as e:
            logger.error(f"[{self.name}] ‚ùå Erreur _playlist.txt: {e}")
            return None

    def _verify_playlist(self):
        """V√©rifie que le fichier playlist est valide"""
        try:
            playlist_path = Path(f"/app/content/{self.name}/_playlist.txt")
            if not playlist_path.exists():
                logger.error(f"[{self.name}] ‚ùå _playlist.txt n'existe pas")
                return False

            with open(playlist_path, 'r') as f:
                lines = f.readlines()

            if not lines:
                logger.error(f"[{self.name}] ‚ùå _playlist.txt est vide")
                return False

            valid_count = 0
            for i, line in enumerate(lines, 1):
                line = line.strip()
                if not line:
                    continue

                if not line.startswith('file'):
                    logger.error(f"[{self.name}] ‚ùå Ligne {i} invalide: {line}")
                    return False

                try:
                    file_path = line.split("'")[1] if "'" in line else line.split()[1]
                    file_path = Path(file_path)
                    if not file_path.exists():
                        logger.error(f"[{self.name}] ‚ùå Fichier manquant: {file_path}")
                        return False
                    valid_count += 1
                except Exception as e:
                    logger.error(f"[{self.name}] ‚ùå Erreur parsing ligne {i}: {e}")
                    return False

            if valid_count == 0:
                logger.error(f"[{self.name}] ‚ùå Aucun fichier valide dans la playlist")
                return False

            logger.info(f"[{self.name}] ‚úÖ Playlist valide avec {valid_count} fichiers")
            return True

        except Exception as e:
            logger.error(f"[{self.name}] ‚ùå Erreur v√©rification playlist: {e}")
            return False

    def start_stream(self) -> bool:
        """D√©marre le stream avec FFmpeg en utilisant les nouvelles classes"""
        try:
            # Si le scan initial n'est pas termin√© ou si la cha√Æne n'est pas pr√™te, on attend
            if not self.initial_scan_complete:
                logger.info(f"[{self.name}] ‚è≥ Attente de la fin du scan initial...")
                # On attend au maximum 10 secondes
                for _ in range(10):
                    time.sleep(1)
                    if self.initial_scan_complete:
                        break
                        
            if not self.ready_for_streaming:
                logger.warning(f"[{self.name}] ‚ö†Ô∏è Cha√Æne non pr√™te pour le streaming (pas de vid√©os)")
                return False

            logger.info(f"[{self.name}] üöÄ D√©marrage du stream...")

            hls_dir = Path(f"/app/hls/{self.name}")
            logger.info(f"[{self.name}] Cr√©ation du r√©pertoire HLS: {hls_dir}")
            hls_dir.mkdir(parents=True, exist_ok=True)
        
            concat_file = self._create_concat_file()
            if not concat_file or not concat_file.exists():
                logger.error(f"[{self.name}] ‚ùå _playlist.txt introuvable")
                return False
            else:
                logger.info(f"[{self.name}] ‚úÖ _playlist.txt trouv√©")
            

            start_offset = self.position_manager.get_start_offset()
            logger.info(f"[{self.name}] D√©calage de d√©marrage: {start_offset}")
            
            logger.info(f"[{self.name}] Optimisation pour le mat√©riel...")
            #TODO fix
            #self.command_builder.optimize_for_hardware()
            
            #logger.info(f"[{self.name}] V√©rification mkv...")
            #has_mkv = self.command_builder.detect_mkv_in_playlist(concat_file)
            has_mkv = False
            
            logger.info(f"[{self.name}] Construction de la commande FFmpeg...")
            command = self.command_builder.build_command(
                input_file=concat_file,
                output_dir=hls_dir,
                playback_offset=start_offset,
                progress_file=self.logger.get_progress_file(),
                has_mkv=has_mkv
            )
            
            if not self.process_manager.start_process(command, hls_dir):
                logger.error(f"[{self.name}] ‚ùå √âchec d√©marrage FFmpeg")
                return False
                
            self.position_manager.set_playing(True)
            
            logger.info(f"[{self.name}] ‚úÖ Stream d√©marr√© avec succ√®s")
            return True

        except Exception as e:
            logger.error(f"Erreur d√©marrage stream {self.name}: {e}")
            return False
    
    def _restart_stream(self) -> bool:
        """Red√©marre le stream en cas de probl√®me"""
        try:
            logger.info(f"üîÑ Red√©marrage du stream {self.name}")

            elapsed = time.time() - getattr(self, "last_restart_time", 0)
            if elapsed < self.error_handler.restart_cooldown:
                logger.info(
                    f"‚è≥ Attente du cooldown ({self.error_handler.restart_cooldown - elapsed:.1f}s)"
                )
                time.sleep(self.error_handler.restart_cooldown - elapsed)

            self.last_restart_time = time.time()

            self.process_manager.stop_process()
            time.sleep(2)

            return self.start_stream()

        except Exception as e:
            logger.error(f"Erreur lors du red√©marrage de {self.name}: {e}")
            return False    
    
    def start_stream_if_needed(self) -> bool:
        """D√©marre le stream si n√©cessaire"""
        if not hasattr(self, 'lock'):
            self.lock = threading.Lock()
            
        with self.lock:
            if self.process_manager.is_running():
                return True

            # V√©rification si la cha√Æne est pr√™te pour le streaming
            if not self.ready_for_streaming:
                logger.warning(f"[{self.name}] ‚ö†Ô∏è Cha√Æne non pr√™te pour le streaming")
                return False

            self.last_watcher_time = time.time()

            hls_path = Path(f"/app/hls/{self.name}")
            if not hls_path.exists():
                logger.info(f"[{self.name}] üìÇ Cr√©ation automatique du dossier HLS")
                hls_path.mkdir(parents=True, exist_ok=True)
                os.chmod(hls_path, 0o777)

            # Cr√©e et v√©rifie la playlist
            concat_file = self._create_concat_file()
            if not concat_file or not concat_file.exists():
                logger.error(f"[{self.name}] ‚ùå _playlist.txt est introuvable")
                return False

            if not self._verify_playlist():
                logger.error(f"[{self.name}] ‚ùå V√©rification de playlist √©chou√©e")
                return False

            return self.start_stream()
    
    def stop_stream_if_needed(self):
        """Arr√™te proprement le stream en utilisant les managers"""
        try:
            if not self.process_manager.is_running():
                return
                
            logger.info(f"[{self.name}] üõë Arr√™t du stream (dernier watcher: {time.time() - self.last_watcher_time:.1f}s)")
            
            self.position_manager.set_playing(False)
            self.position_manager.save_position()
            
            self.process_manager.stop_process(save_position=True)
            
            if self.hls_cleaner:
                self.hls_cleaner.cleanup_channel(self.name)
                
            logger.info(f"[{self.name}] ‚úÖ Stream arr√™t√© avec succ√®s")
                
        except Exception as e:
            logger.error(f"[{self.name}] ‚ùå Erreur arr√™t stream: {e}")
    
    def _scan_videos(self) -> bool:
        """Scanne les fichiers vid√©os et met √† jour processed_videos"""
        try:
            source_dir = Path(self.video_dir)
            ready_to_stream_dir = source_dir / "ready_to_stream"
            ready_to_stream_dir.mkdir(exist_ok=True)
            
            self._verify_processor()
            
            # On r√©initialise la liste des vid√©os trait√©es
            self.processed_videos = []
            
            # On scanne d'abord les vid√©os dans ready_to_stream
            mp4_files = list(ready_to_stream_dir.glob("*.mp4"))
            if mp4_files:
                self.processed_videos.extend(mp4_files)
                logger.info(f"[{self.name}] ‚úÖ {len(mp4_files)} vid√©os trouv√©es dans ready_to_stream")
                
                # La cha√Æne est pr√™te si on a des vid√©os
                self.ready_for_streaming = True
                return True

            # Si aucun fichier dans ready_to_stream, on v√©rifie s'il y a des fichiers √† traiter
            video_extensions = (".mp4", ".avi", ".mkv", ".mov")
            source_files = []
            for ext in video_extensions:
                source_files.extend(source_dir.glob(f"*{ext}"))

            if not source_files:
                logger.warning(f"[{self.name}] ‚ö†Ô∏è Aucun fichier vid√©o dans {self.video_dir}")
                return False

            # La cha√Æne n'est pas encore pr√™te, mais on va traiter les vid√©os
            logger.info(f"[{self.name}] üîÑ {len(source_files)} fichiers sources √† traiter")
            
            # Marque la cha√Æne comme non pr√™te jusqu'√† ce que les vid√©os soient trait√©es
            self.ready_for_streaming = False
            
            return False

        except Exception as e:
            logger.error(f"[{self.name}] ‚ùå Erreur scan des vid√©os: {str(e)}")
            return False
    
    def update_watchers(self, count: int):
        """Mise √† jour du nombre de watchers"""
        with self.lock:
            old_count = getattr(self, 'watchers_count', 0)
            self.watchers_count = count
            
            self.last_watcher_time = time.time()
            
            if old_count != count:
                logger.info(f"üìä Mise √† jour {self.name}: {count} watchers")
                
            if count > 0 and old_count == 0:
                logger.info(f"[{self.name}] üî• Premier watcher, d√©marrage du stream")
                self.start_stream_if_needed()
  
    def _verify_processor(self) -> bool:
        """V√©rifie que le VideoProcessor est correctement initialis√©"""
        try:
            if not self.processor:
                logger.error(f"[{self.name}] ‚ùå VideoProcessor non initialis√©")
                return False
                
            video_dir = Path(self.video_dir)
            if not video_dir.exists():
                logger.error(f"[{self.name}] ‚ùå Dossier vid√©o introuvable: {video_dir}")
                return False
                
            if not os.access(video_dir, os.R_OK | os.W_OK):
                logger.error(f"[{self.name}] ‚ùå Permissions insuffisantes sur {video_dir}")
                return False
                
            ready_to_stream_dir = video_dir / "ready_to_stream"
            try:
                ready_to_stream_dir.mkdir(exist_ok=True)
            except Exception as e:
                logger.error(f"[{self.name}] ‚ùå Impossible de cr√©er {ready_to_stream_dir}: {e}")
                return False
                
            logger.info(f"[{self.name}] ‚úÖ VideoProcessor correctement initialis√©")
            return True
            
        except Exception as e:
            logger.error(f"[{self.name}] ‚ùå Erreur v√©rification VideoProcessor: {e}")
            return False

    def _handle_process_died(self, return_code):
        """G√®re la mort du processus FFmpeg"""
        logger.error(f"[{self.name}] ‚ùå Processus FFmpeg termin√© avec code: {return_code}")
        self.error_handler.add_error("PROCESS_DIED")
        self._restart_stream()
        
    def _handle_position_update(self, position):
        """Re√ßoit les mises √† jour de position du ProcessManager"""
        self.position_manager.update_from_progress(self.logger.get_progress_file())
        
    def _handle_segment_created(self, segment_path, size):  
        """Notifi√© quand un nouveau segment est cr√©√©"""
        self.last_segment_time = time.time()
        if self.logger:
            self.logger.log_segment(segment_path, size)
            
    def report_segment_jump(self, prev_segment: int, curr_segment: int):
        """
        G√®re les sauts d√©tect√©s dans les segments HLS
        
        Args:
            prev_segment: Le segment pr√©c√©dent
            curr_segment: Le segment actuel (avec un saut)
        """
        try:
            jump_size = curr_segment - prev_segment
            
            # On ne s'inqui√®te que des sauts importants
            if jump_size <= 5:
                return
                
            logger.warning(f"[{self.name}] üö® Saut de segment d√©tect√©: {prev_segment} ‚Üí {curr_segment} (delta: {jump_size})")
            
            # Si les sauts sont vraiment grands (>= 20), on peut envisager un red√©marrage
            if jump_size >= 20:
                if self.error_handler and self.error_handler.add_error("segment_jump"):
                    logger.warning(f"[{self.name}] üîÑ Tentative de red√©marrage suite √† un saut important")
                    
                    # On sauvegarde la position actuelle
                    if hasattr(self, 'position_manager'):
                        self.position_manager.save_position()
                    
                    # V√©rification des stats de visionnage
                    watchers = getattr(self, 'watchers_count', 0)
                    if watchers > 0:
                        return self._restart_stream()
                    else:
                        logger.info(f"[{self.name}] ‚ÑπÔ∏è Pas de red√©marrage: aucun watcher actif")
                        
            # Sinon, on log juste le probl√®me
            else:
                # On pourrait aussi analyser la fr√©quence des sauts
                logger.info(f"[{self.name}] ‚ÑπÔ∏è Saut mineur d√©tect√©, surveillance continue")
                
        except Exception as e:
            logger.error(f"[{self.name}] ‚ùå Erreur gestion saut de segment: {e}")
            return False

    def refresh_videos(self):
        """Force un nouveau scan des vid√©os"""
        threading.Thread(target=self._scan_videos_async, daemon=True).start()
        return True