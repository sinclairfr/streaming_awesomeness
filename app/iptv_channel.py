# iptv_channel.py
import os
import time
import threading
import random
from pathlib import Path
from typing import Optional, List
import shutil
from video_processor import VideoProcessor
from hls_cleaner import HLSCleaner
from ffmpeg_logger import FFmpegLogger
from ffmpeg_command_builder import FFmpegCommandBuilder
from ffmpeg_process_manager import FFmpegProcessManager
from playback_position_manager import PlaybackPositionManager
import subprocess
from config import (
    logger,
    CRASH_THRESHOLD,
)
from video_processor import verify_file_ready, get_accurate_duration
import datetime
from error_handler import ErrorHandler
from time_tracker import TimeTracker
import psutil


class IPTVChannel:
    """G√®re une cha√Æne IPTV, son streaming et sa surveillance"""
    
    # Initialisation des variables de classe (statiques)
    _playlist_creation_timestamps = {}

    def __init__(
        self,
        name: str,
        video_dir: str,
        hls_cleaner: HLSCleaner,
        use_gpu: bool = False,
        stats_collector=None,
    ):
        """Initialise une cha√Æne IPTV"""
        self.name = name
        self.video_dir = video_dir
        self.hls_cleaner = hls_cleaner
        self.use_gpu = use_gpu

        # Configuration du logger
        self.logger = FFmpegLogger(name)

        # Stats collector optionnel
        self.stats_collector = stats_collector
        
        # Gestion centralis√©e du temps de visionnage
        self.time_tracker = TimeTracker(stats_collector) if stats_collector else None

        # Gestion des erreurs et des arr√™ts d'urgence
        self.error_handler = ErrorHandler(
            channel_name=self.name,
            max_restarts=5,
            restart_cooldown=60
        )
        
        # Chemin du fichier de log
        self.crash_log_path = Path(f"/app/logs/crashes_{self.name}.log")
        self.crash_log_path.parent.mkdir(exist_ok=True)

        self.lock = threading.Lock()
        self.ready_for_streaming = False
        self.total_duration = 0

        # Initialiser les composants dans le bon ordre
        self.position_manager = PlaybackPositionManager(name)
        self.command_builder = FFmpegCommandBuilder(name, use_gpu=use_gpu)
        self.process_manager = FFmpegProcessManager(
            self.name, self.logger
        )

        # Ajouter cette cha√Æne au registre global
        if hasattr(FFmpegProcessManager, "all_channels"):
            FFmpegProcessManager.all_channels[name] = self

        # Configuration des callbacks
        self.process_manager.on_process_died = self._handle_process_died
        self.process_manager.on_position_update = self._handle_position_update
        self.process_manager.on_segment_created = self._handle_segment_created

        # Autres composants
        self.processor = VideoProcessor(self.video_dir)

        # Variables de surveillance
        self.processed_videos = []
        self.watchers_count = 0
        self.last_watcher_time = time.time()
        self.last_segment_time = time.time()

        # √âtat du scan initial
        self.initial_scan_complete = False
        self.scan_lock = threading.Lock()

        # Chargement des vid√©os
        logger.info(f"[{self.name}] üîÑ Pr√©paration initiale de la cha√Æne")
        self._scan_videos()
        self._create_concat_file()

        # Calcul de la dur√©e totale
        total_duration = self._calculate_total_duration()
        self.position_manager.set_total_duration(total_duration)
        self.process_manager.set_total_duration(total_duration)

        self.initial_scan_complete = True
        self.ready_for_streaming = len(self.processed_videos) > 0

        logger.info(
            f"[{self.name}] ‚úÖ Initialisation compl√®te. Cha√Æne pr√™te: {self.ready_for_streaming}"
        )

    def _create_concat_file(self) -> Optional[Path]:
        """Cr√©e le fichier de concat√©nation avec les bons chemins et sans doublons"""
        # V√©rifier si on a cr√©√© une playlist r√©cemment pour √©viter les doublons
        current_time = time.time()
        
        last_creation = IPTVChannel._playlist_creation_timestamps.get(self.name, 0)
        concat_file = Path(self.video_dir) / "_playlist.txt"

        # Si on a cr√©√© une playlist dans les 10 derni√®res secondes, ne pas recr√©er
        if current_time - last_creation < 10:
            logger.debug(
                f"[{self.name}] ‚ÑπÔ∏è Cr√©ation de playlist ignor√©e (derni√®re: il y a {current_time - last_creation:.1f}s)"
            )
            return concat_file if concat_file.exists() else None

        # Mettre √† jour le timestamp AVANT de cr√©er le fichier
        IPTVChannel._playlist_creation_timestamps[self.name] = current_time
        
        try:
            # Utiliser ready_to_stream
            ready_to_stream_dir = Path(self.video_dir) / "ready_to_stream"
            if not ready_to_stream_dir.exists():
                logger.error(f"[{self.name}] ‚ùå Dossier ready_to_stream introuvable")
                return None

            # Scanner le dossier ready_to_stream
            ready_files = list(ready_to_stream_dir.glob("*.mp4"))
            
            if not ready_files:
                logger.error(f"[{self.name}] ‚ùå Aucun fichier MP4 dans {ready_to_stream_dir}")
                return None
                
            logger.info(f"[{self.name}] üîç {len(ready_files)} fichiers trouv√©s dans ready_to_stream")

            # M√©langer les fichiers pour plus de vari√©t√©
            random.shuffle(ready_files)

            # V√©rifier que tous les fichiers sont valides
            valid_files = []
            for video in ready_files:
                if video.exists() and os.access(video, os.R_OK):
                    try:
                        duration = get_accurate_duration(video)
                        if duration and duration > 0:
                            valid_files.append(video)
                        else:
                            logger.warning(f"[{self.name}] ‚ö†Ô∏è Fichier ignor√©: {video.name} (dur√©e invalide)")
                    except Exception as e:
                        logger.warning(f"[{self.name}] ‚ö†Ô∏è Fichier ignor√©: {video.name} (erreur validation: {e})")
                else:
                    logger.warning(f"[{self.name}] ‚ö†Ô∏è Fichier ignor√©: {video.name} (non accessible)")

            if not valid_files:
                logger.error(f"[{self.name}] ‚ùå Aucun fichier valide pour la playlist")
                return None

            logger.info(f"[{self.name}] üõ†Ô∏è Cr√©er le fichier de concat√©nation avec {len(valid_files)} fichiers uniques")

            # Cr√©er le fichier de concat√©nation
            with open(concat_file, "w", encoding="utf-8") as f:
                for video in valid_files:
                    escaped_path = str(video.absolute()).replace("'", "'\\''")
                    f.write(f"file '{escaped_path}'\n")
                    logger.debug(f"[{self.name}] ‚úÖ Ajout de {video.name}")

            # V√©rifier que le fichier a √©t√© cr√©√© correctement
            if not concat_file.exists() or concat_file.stat().st_size == 0:
                logger.error(f"[{self.name}] ‚ùå Erreur: playlist vide ou non cr√©√©e")
                return None

            # Mettre √† jour self.processed_videos
            self.processed_videos = valid_files.copy()

            logger.info(f"[{self.name}] üé• Playlist cr√©√©e avec {len(valid_files)} fichiers uniques en mode al√©atoire")
            return concat_file

        except Exception as e:
            logger.error(f"[{self.name}] ‚ùå Erreur _playlist.txt: {e}")
            return None

    def _handle_position_update(self, position):
        """Re√ßoit les mises √† jour de position du ProcessManager"""
        try:
            # D√©tecter les sauts de position
            if hasattr(self, "last_logged_position"):
                if abs(position - self.last_logged_position) > 30:
                    logger.info(f"[{self.name}] üìä Saut d√©tect√©: {self.last_logged_position:.2f}s ‚Üí {position:.2f}s")
                    
                    # V√©rifier si on a des erreurs de DTS
                    if position < self.last_logged_position:
                        logger.warning(f"[{self.name}] ‚ö†Ô∏è DTS non-monotone d√©tect√©")
                        self.last_dts_error_time = time.time()
                        
                        # Si on a trop d'erreurs DTS, on force un red√©marrage
                        if hasattr(self, "dts_error_count"):
                            self.dts_error_count += 1
                            if self.dts_error_count >= 3:
                                logger.error(f"[{self.name}] ‚ùå Trop d'erreurs DTS, red√©marrage forc√©")
                                self.process_manager.restart_process()
                                self.dts_error_count = 0
                        else:
                            self.dts_error_count = 1
            
            # Mettre √† jour la position
            self.last_logged_position = position
            
            # V√©rifier si on a calcul√© la dur√©e du fichier actuel
            if not hasattr(self, "current_file_duration") and position > 0:
                # Estimer la dur√©e en fonction de la position (approximation)
                duration = get_accurate_duration(self.current_video_file) if hasattr(self, "current_video_file") else 0
                if duration > 0:
                    self.current_file_duration = duration
                    logger.info(f"[{self.name}] ‚ÑπÔ∏è Dur√©e du fichier actuel: {duration:.2f}s")
            
        except Exception as e:
            logger.error(f"[{self.name}] ‚ùå Erreur dans _handle_position_update: {e}")

    def _scan_videos_async(self):
        """Scanne les vid√©os en t√¢che de fond pour les mises √† jour ult√©rieures"""
        # √âviter les ex√©cutions multiples concurrentes
        if hasattr(self, "_scan_in_progress") and self._scan_in_progress:
            logger.debug(f"[{self.name}] ‚è≠Ô∏è Scan d√©j√† en cours, ignor√©")
            return

        # V√©rifier si un scan a √©t√© fait r√©cemment
        current_time = time.time()
        if hasattr(self, "_last_scan_time") and (current_time - self._last_scan_time) < 60:
            logger.debug(f"[{self.name}] ‚è≠Ô∏è Dernier scan trop r√©cent, ignor√©")
            return

        self._scan_in_progress = True
        try:
            with self.scan_lock:
                logger.info(f"[{self.name}] üîç Scan de mise √† jour des vid√©os en cours...")
                old_videos = set(self.processed_videos)
                self._scan_videos()

                # Ne continuer que si des changements ont √©t√© d√©tect√©s
                new_videos = set(self.processed_videos)
                if old_videos == new_videos:
                    logger.debug(f"[{self.name}] ‚ÑπÔ∏è Aucun changement d√©tect√© dans les vid√©os")
                    return

                # Mise √† jour de la dur√©e totale
                total_duration = self._calculate_total_duration()
                self.position_manager.set_total_duration(total_duration)
                self.process_manager.set_total_duration(total_duration)

                # Mise √† jour de la playlist
                self._create_concat_file()

                logger.info(f"[{self.name}] ‚úÖ Scan de mise √† jour termin√©. Cha√Æne pr√™te: {self.ready_for_streaming}")
                self._last_scan_time = current_time

        except Exception as e:
            logger.error(f"[{self.name}] ‚ùå Erreur scan de mise √† jour: {e}")
        finally:
            self._scan_in_progress = False

    def _calculate_total_duration(self) -> float:
        """Calcule la dur√©e totale de la playlist en utilisant le PlaybackPositionManager"""
        try:
            # V√©rification que la liste processed_videos n'est pas vide
            if not self.processed_videos:
                logger.warning(f"[{self.name}] ‚ö†Ô∏è Aucune vid√©o √† analyser pour le calcul de dur√©e")
                # On conserve la dur√©e existante si possible, sinon valeur par d√©faut
                if hasattr(self, "total_duration") and self.total_duration > 0:
                    return self.total_duration
                return 3600.0

            # D√©l√©guer le calcul au PlaybackPositionManager
            total_duration = self.position_manager.calculate_durations(self.processed_videos)

            if total_duration <= 0:
                logger.warning(f"[{self.name}] ‚ö†Ô∏è Dur√©e totale invalide, fallback √† la valeur existante ou 3600s")
                if hasattr(self, "total_duration") and self.total_duration > 0:
                    return self.total_duration
                return 3600.0

            # Mettre √† jour notre dur√©e totale
            self.total_duration = total_duration

            logger.info(f"[{self.name}] ‚úÖ Dur√©e totale calcul√©e: {total_duration:.2f}s ({len(self.processed_videos)} vid√©os)")
            return total_duration

        except Exception as e:
            logger.error(f"[{self.name}] ‚ùå Erreur calcul dur√©e: {e}")
            # Fallback √† la valeur existante ou valeur par d√©faut
            if hasattr(self, "total_duration") and self.total_duration > 0:
                return self.total_duration
            return 3600.0

    def _segment_monitor_loop(self):
        """Boucle de surveillance des segments pour v√©rifier la sant√© du stream"""
        try:
            # Ajouter un d√©lai initial pour laisser le temps √† FFmpeg de d√©marrer
            if not hasattr(self, "segment_monitor_started"):
                self.segment_monitor_started = time.time()
                logger.info(f"[{self.name}] üîç Surveillance du stream d√©marr√©e")
                time.sleep(5)
                if not hasattr(self, "_startup_time"):
                    self._startup_time = time.time() - 5
            
            # Initialiser le timestamp du dernier health check
            if not hasattr(self, "last_health_check"):
                self.last_health_check = time.time()
            
            # La boucle s'ex√©cute tant que le processus est en cours
            while self.process_manager.is_running():
                # V√©rification p√©riodique de la sant√© du stream
                if time.time() - self.last_health_check >= 30:
                    self.process_manager.check_stream_health()
                    self.last_health_check = time.time()
                
                # Pause entre les v√©rifications
                time.sleep(1)

        except Exception as e:
            logger.error(f"[{self.name}] ‚ùå Erreur dans la boucle de surveillance: {e}")

    def _handle_segment_created(self, segment_path, size):
        """G√®re la cr√©ation d'un nouveau segment HLS"""
        if self.logger:
            self.logger.log_segment(segment_path, size)

        # MAJ des stats de segments
        if hasattr(self, "stats_collector") and self.stats_collector:
            # Extraction de l'ID du segment depuis le nom
            segment_id = Path(segment_path).stem.split("_")[-1]
            self.stats_collector.update_segment_stats(self.name, segment_id, size)
        
        # Mise √† jour du timestamp du dernier segment
        self.last_segment_time = time.time()
        logger.debug(f"[{self.name}] ‚è±Ô∏è Segment cr√©√©: {Path(segment_path).name}")

    def _handle_process_died(self, exit_code, stderr=None):
        """G√®re la mort du processus FFmpeg et d√©cide des actions √† prendre"""
        try:
            # Analyser l'erreur pour d√©tecter le type
            error_type = "unknown_error"
            diagnosis = ""
            
            if exit_code < 0:
                # Signal n√©gatif, indique une terminaison par signal
                error_type = f"signal_{abs(exit_code)}"
                logger.warning(f"[{self.name}] Processus termin√© par signal {abs(exit_code)}")
                
            elif stderr and "error" in stderr.lower():
                # Extraction du type d'erreur √† partir du message
                if "no such file" in stderr.lower():
                    error_type = "missing_file"
                elif "invalid data" in stderr.lower():
                    error_type = "invalid_data"
                elif "dts" in stderr.lower():
                    error_type = "dts_error"
                elif "timeout" in stderr.lower():
                    error_type = "timeout"
                
                # Enregistrer le message d'erreur complet pour plus de contexte
                logger.warning(f"[{self.name}] üìù Message d'erreur FFmpeg: {stderr[:200]}...")
            
            # Traiter les erreurs de diagnostic enrichi (format dictionnaire)
            if stderr and stderr.startswith("{'type':"):
                try:
                    # Tenter de r√©cup√©rer le diagnostic structur√©
                    import ast
                    error_info = ast.literal_eval(stderr)
                    
                    if isinstance(error_info, dict) and 'diagnosis' in error_info:
                        diagnosis = error_info['diagnosis']
                        error_type = "health_check_detailed"
                        
                        # Logs d√©taill√©s du diagnostic
                        elapsed = error_info.get('elapsed', 0)
                        cpu_usage = error_info.get('cpu_usage', 0)
                        segments_count = error_info.get('segments_count', 0)
                        avg_segment_size = error_info.get('average_segment_size', 0)
                        
                        logger.warning(f"[{self.name}] üìä DIAGNOSTIC D√âTAILL√â: {diagnosis}")
                        logger.warning(f"[{self.name}] ‚è±Ô∏è {elapsed:.1f}s sans activit√© | CPU: {cpu_usage:.1f}% | Segments: {segments_count} | Taille moy: {avg_segment_size/1024:.1f}KB")
                except:
                    # Si √©chec du parsing, utiliser le message standard
                    error_type = "health_check_failed"
                    logger.warning(f"[{self.name}] Diagnostic non structur√©: {stderr[:100]}...")
            
            # Approche sp√©cifique pour les probl√®mes de sant√©
            if exit_code == -2:  # Code sp√©cial pour probl√®me de sant√©
                # On incr√©mente progressivement un compteur d'avertissements
                # au lieu de red√©marrer imm√©diatement
                if not hasattr(self, "_health_warnings"):
                    self._health_warnings = 0
                    self._health_check_details = []
                
                # Collecter des d√©tails sur le probl√®me de sant√©
                current_time = time.time()
                elapsed_since_last_segment = current_time - getattr(self.process_manager, "last_segment_time", current_time)
                duration_threshold = getattr(self, "current_file_duration", 0) or 300  # Dur√©e par d√©faut de 5 minutes
                
                health_details = {
                    "timestamp": current_time,
                    "elapsed_since_segment": elapsed_since_last_segment,
                    "file_duration": duration_threshold,
                    "diagnosis": diagnosis or "Probl√®me de sant√© non sp√©cifi√©",
                    "stderr": stderr[:100] if stderr else "Aucune erreur sp√©cifique"
                }
                
                self._health_warnings += 1
                self._health_check_details.append(health_details)
                
                # Log d√©taill√© du probl√®me de sant√©
                logger.warning(f"[{self.name}] ‚ö†Ô∏è Probl√®me de sant√© d√©tect√© - Avertissement {min(self._health_warnings, 3)}/3")
                
                if diagnosis:
                    logger.warning(f"[{self.name}] üîç Cause probable: {diagnosis}")
                else:
                    logger.warning(f"[{self.name}] ‚è±Ô∏è Temps √©coul√© depuis dernier segment: {elapsed_since_last_segment:.1f}s")
                
                # On red√©marre seulement apr√®s plusieurs avertissements
                if self._health_warnings >= 3:
                    logger.warning(f"[{self.name}] ‚ùó Red√©marrage apr√®s {self._health_warnings} avertissements de sant√©")
                    details_log = "\n".join([f"  - {i+1}: {details['elapsed_since_segment']:.1f}s sans segment, diagnostic: {details['diagnosis']}" 
                                            for i, details in enumerate(self._health_check_details)])
                    logger.warning(f"[{self.name}] üìä Historique des probl√®mes de sant√©:\n{details_log}")
                    
                    self._health_warnings = 0
                    self._health_check_details = []
                    self._restart_stream(diagnostic=diagnosis)
                else:
                    logger.info(f"[{self.name}] üîç Avertissement de sant√© {min(self._health_warnings, 3)}/3, surveillance continue")
            else:
                # Pour les autres erreurs, on utilise l'error handler avec sa logique am√©lior√©e
                if self.error_handler.add_error(error_type):
                    logger.warning(f"[{self.name}] ‚ùó Red√©marrage n√©cessaire apr√®s erreur: {error_type}")
                    # Log des erreurs accumul√©es
                    error_counts = [f"{err_type}: {data['count']}" for err_type, data in self.error_handler.errors.items() if data['count'] > 0]
                    logger.warning(f"[{self.name}] üìä Erreurs accumul√©es: {', '.join(error_counts)}")
                    
                    # On ajoute un petit d√©lai al√©atoire pour √©viter les red√©marrages simultan√©s
                    time.sleep(random.uniform(0.5, 3.0))
                    self._restart_stream(diagnostic=error_type)
                elif self.error_handler.has_critical_errors():
                    logger.error(f"[{self.name}] ‚ùå Erreurs critiques d√©tect√©es, arr√™t du stream")
                    # Attendre un peu avant d'arr√™ter pour √©viter les actions trop rapproch√©es
                    time.sleep(2)
                    self.stop_stream_if_needed()
                
        except Exception as e:
            logger.error(f"[{self.name}] Erreur lors de la gestion du processus: {e}")
            logger.error(traceback.format_exc())

    def _restart_stream(self, diagnostic=None) -> bool:
        """Red√©marre le stream en cas de probl√®me"""
        try:
            # R√©cup√©rer la derni√®re raison du red√©marrage depuis l'error handler
            error_summary = self.error_handler.get_errors_summary() 
            error_count = sum(e["count"] for e in self.error_handler.errors.values() if e["count"] > 0)
            error_types = [k for k, v in self.error_handler.errors.items() if v["count"] > 0]

            # Cr√©ation d'un message d√©taill√© avec les raisons du red√©marrage
            if diagnostic:
                restart_reason = f"diagnostic: {diagnostic}"
            elif hasattr(self, "_health_warnings") and getattr(self, "_health_warnings", 0) > 0:
                restart_reason = f"probl√®mes de sant√© du stream ({self._health_warnings}/3 avertissements)"
            elif error_types:
                restart_reason = f"erreurs accumul√©es ({error_count}): {', '.join(error_types)}"
            else:
                restart_reason = "raison inconnue"

            # Log verbeux du red√©marrage avec raisons d√©taill√©es
            logger.info(f"[{self.name}] üîÑüîÑüîÑ RED√âMARRAGE DU STREAM - Raison: {restart_reason}")
            logger.info(f"[{self.name}] üìä D√©tails des erreurs: {error_summary}")

            # Ajouter un d√©lai al√©atoire pour √©viter les red√©marrages en cascade
            jitter = random.uniform(0.5, 2.0)
            time.sleep(jitter)

            # Utiliser l'error handler pour v√©rifier le cooldown
            if not self.error_handler.should_restart():
                logger.info(f"[{self.name}] ‚è≥ Attente du cooldown de red√©marrage")
                return False

            # V√©rifier l'utilisation CPU du syst√®me
            try:
                cpu_system = psutil.cpu_percent(interval=0.5)
                mem_percent = psutil.virtual_memory().percent
                logger.info(f"[{self.name}] üñ•Ô∏è Ressources syst√®me: CPU {cpu_system}%, M√©moire {mem_percent}%")
                
                # Avertir si ressources critiques
                if cpu_system > 85:
                    logger.warning(f"[{self.name}] ‚ö†Ô∏è Attention: CPU syst√®me √©lev√© ({cpu_system}%) pendant le red√©marrage")
            except Exception as e:
                logger.debug(f"[{self.name}] Impossible de v√©rifier les ressources syst√®me: {e}")

            # Arr√™ter proprement les processus FFmpeg via le ProcessManager
            logger.info(f"[{self.name}] üõë Arr√™t du processus FFmpeg en cours...")
            self.process_manager.stop_process()

            # Nettoyer le dossier HLS avec le HLSCleaner
            logger.info(f"[{self.name}] üßπ Nettoyage des segments HLS...")
            hls_dir = Path(f"/app/hls/{self.name}")
            segments_before = len(list(hls_dir.glob("*.ts"))) if hls_dir.exists() else 0
            self.hls_cleaner.cleanup_channel(self.name)
            segments_after = len(list(hls_dir.glob("*.ts"))) if hls_dir.exists() else 0
            logger.info(f"[{self.name}] üßπ Nettoyage des segments: {segments_before} ‚Üí {segments_after}")

            # V√©rifier que nous avons des fichiers valides
            ready_dir = Path(self.video_dir) / "ready_to_stream"
            if not ready_dir.exists():
                logger.error(f"[{self.name}] ‚ùå Dossier ready_to_stream introuvable")
                return False

            video_files = list(ready_dir.glob("*.mp4"))
            if not video_files:
                logger.error(f"[{self.name}] ‚ùå Aucun fichier MP4 dans ready_to_stream")
                return False

            # V√©rifier que les fichiers sont valides
            valid_files = []
            for video_file in video_files:
                if verify_file_ready(video_file):
                    valid_files.append(video_file)
                else:
                    logger.warning(f"[{self.name}] ‚ö†Ô∏è Fichier {video_file.name} ignor√© car non valide")

            if not valid_files:
                logger.error(f"[{self.name}] ‚ùå Aucun fichier MP4 valide trouv√©")
                return False

            # Lancer un nouveau stream
            logger.info(f"[{self.name}] üöÄ D√©marrage d'un nouveau stream apr√®s red√©marrage...")
            result = self.start_stream()
            if result:
                # R√©initialiser les compteurs d'erreurs apr√®s un red√©marrage r√©ussi
                self.error_handler.reset()
                
                # Noter le temps de red√©marrage pour le suivi et les stats
                self.last_restart_timestamp = time.time()
                self.last_restart_reason = restart_reason
                
                logger.info(f"[{self.name}] ‚úÖ Stream red√©marr√© avec succ√®s - Ancien probl√®me r√©solu: {restart_reason}")
                
                # Collecter des infos apr√®s red√©marrage pour diagnostic
                time.sleep(2)  # Court d√©lai pour laisser FFmpeg d√©marrer
                if hasattr(self.process_manager, "process") and self.process_manager.process:
                    pid = self.process_manager.process.pid
                    try:
                        ffmpeg_proc = psutil.Process(pid)
                        cpu_usage = ffmpeg_proc.cpu_percent(interval=0.5)
                        mem_usage = ffmpeg_proc.memory_info().rss / (1024 * 1024)
                        logger.info(f"[{self.name}] üìä Nouveau processus FFmpeg: PID {pid}, CPU {cpu_usage:.1f}%, M√©moire {mem_usage:.1f}MB")
                    except:
                        pass
            else:
                logger.error(f"[{self.name}] ‚ùå √âchec du red√©marrage apr√®s probl√®me: {restart_reason}")
            return result

        except Exception as e:
            logger.error(f"Erreur lors du red√©marrage de {self.name}: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return False

    def stop_stream_if_needed(self):
        """Arr√™te le stream si n√©cessaire"""
        try:
            # Utiliser le process manager pour arr√™ter proprement les processus FFmpeg
            self.process_manager.stop_process()

            # Nettoyer le dossier HLS avec le HLSCleaner
            self.hls_cleaner.cleanup_channel(self.name)

            logger.info(f"[{self.name}] ‚úÖ Stream arr√™t√© avec succ√®s")
            return True

        except Exception as e:
            logger.error(f"[{self.name}] ‚ùå Erreur arr√™t stream: {e}")
            return False

    def start_stream(self) -> bool:
        """
        D√©marre le flux HLS pour cette cha√Æne en traitant un fichier √† la fois.
        """
        try:
            # Initialiser le temps de d√©marrage
            self._startup_time = time.time()
            
            # 1) V√©rifier qu'on a des vid√©os pr√™tes
            if not self.ready_for_streaming:
                logger.warning(f"[{self.name}] ‚ö†Ô∏è Cha√Æne non pr√™te (pas de vid√©os). Annulation du d√©marrage.")
                return False

            # 2) Pr√©parer le dossier HLS
            hls_dir = Path(f"/app/hls/{self.name}")
            if not hls_dir.exists():
                # Cr√©er le dossier HLS s'il n'existe pas
                try:
                    hls_dir.mkdir(parents=True, exist_ok=True)
                    # S'assurer que le dossier est accessible en √©criture
                    os.chmod(hls_dir, 0o777)
                    logger.info(f"[{self.name}] üìÅ Cr√©ation du dossier HLS: {hls_dir}")
                except Exception as e:
                    logger.error(f"[{self.name}] ‚ùå Erreur cr√©ation dossier HLS: {e}")
                    return False
            else:
                # Nettoyer le dossier existant
                self.hls_cleaner.cleanup_channel(self.name)

            # 3) S√©lectionner un fichier al√©atoire parmi les fichiers valides
            if not self.processed_videos:
                logger.error(f"[{self.name}] ‚ùå Aucun fichier vid√©o disponible")
                return False
                
            video_file = random.choice(self.processed_videos)
            if not video_file.exists():
                logger.error(f"[{self.name}] ‚ùå Fichier s√©lectionn√© n'existe pas: {video_file}")
                return False
            
            # Suivre le fichier actuellement utilis√©
            self.current_video_file = video_file
            
            # Obtenir la dur√©e du fichier pour la surveillance
            try:
                duration = get_accurate_duration(video_file)
                if duration and duration > 0:
                    self.current_file_duration = duration
                    logger.info(f"[{self.name}] ‚ÑπÔ∏è Dur√©e du fichier actuel: {duration:.2f}s")
                else:
                    logger.warning(f"[{self.name}] ‚ö†Ô∏è Impossible de d√©terminer la dur√©e du fichier")
                    self.current_file_duration = 300  # Valeur par d√©faut
            except Exception as e:
                logger.warning(f"[{self.name}] ‚ö†Ô∏è Erreur calcul dur√©e: {e}")
                self.current_file_duration = 300  # Valeur par d√©faut
            
            logger.info(f"[{self.name}] üé• D√©marrage avec le fichier: {video_file.name}")

            # 4) Construire la commande FFmpeg pour un fichier individuel
            progress_file = f"/app/logs/ffmpeg/{self.name}_progress.log"
            
            command = [
                "ffmpeg",
                "-hide_banner",
                "-loglevel", "info",
                "-y",
                "-thread_queue_size", "4096",
                "-analyzeduration", "5M",
                "-probesize", "5M",
                "-re",
                "-fflags", "+genpts+igndts+discardcorrupt",
                "-threads", "2",
                "-avoid_negative_ts", "make_zero"
            ]
            
            # Ajouter le fichier de progression
            if progress_file:
                command.extend(["-progress", progress_file])
            
            # Ajouter l'entr√©e (fichier individuel)
            command.extend(["-i", str(video_file)])
            
            # Param√®tres de sortie
            command.extend([
                "-c:v", "copy",
                "-c:a", "copy",
                "-sn", "-dn",
                "-map", "0:v:0",
                "-map", "0:a:0?",
                "-max_muxing_queue_size", "2048",
                "-fps_mode", "passthrough",
                "-f", "hls",
                "-hls_time", "2",
                "-hls_list_size", "6",
                "-hls_delete_threshold", "1",
                "-hls_flags", "delete_segments+append_list+independent_segments",
                "-hls_allow_cache", "1",
                "-start_number", "0",
                "-hls_segment_type", "mpegts",
                "-max_delay", "1000000",
                "-hls_init_time", "1",
                "-hls_segment_filename", f"{str(hls_dir)}/segment_%d.ts",
                f"{str(hls_dir)}/playlist.m3u8"
            ])
            
            # Log de la commande compl√®te
            logger.info("=" * 80)
            logger.info(f"[{self.name}] üöÄ Lancement FFmpeg: {' '.join(command)}")
            logger.info("=" * 80)
            
            # 5) D√©marrer le processus FFmpeg via le ProcessManager
            success = self.process_manager.start_process(command, str(hls_dir))
            if not success:
                logger.error(f"[{self.name}] ‚ùå √âchec du d√©marrage du processus FFmpeg")
                return False

            # 6) D√©marrer la boucle de surveillance des segments en arri√®re-plan
            if not hasattr(self, "_segment_monitor_thread") or not self._segment_monitor_thread.is_alive():
                self._segment_monitor_thread = threading.Thread(
                    target=self._segment_monitor_loop,
                    daemon=True
                )
                self._segment_monitor_thread.start()
                logger.info(f"[{self.name}] üîç Boucle de surveillance des segments d√©marr√©e")
                
            # 7) D√©marrer le gestionnaire de fichiers en arri√®re-plan 
            if not hasattr(self, "_file_manager_thread") or not self._file_manager_thread.is_alive():
                self._file_manager_thread = threading.Thread(
                    target=self._manage_video_files,
                    daemon=True
                )
                self._file_manager_thread.start()
                logger.info(f"[{self.name}] üîÑ Gestionnaire de fichiers d√©marr√©")

            logger.info(f"[{self.name}] ‚úÖ Stream d√©marr√© avec succ√®s")
            return True

        except Exception as e:
            logger.error(f"[{self.name}] ‚ùå Erreur start_stream: {e}")
            return False
            
    def _manage_video_files(self):
        """
        G√®re la rotation des fichiers vid√©o (arr√™t/d√©marrage de FFmpeg entre chaque fichier).
        Surveille la fin de la lecture du fichier actuel et passe au suivant.
        """
        try:
            # Attendre que le stream soit bien d√©marr√©
            time.sleep(10)
            
            while True:
                # V√©rifier si le processus est en cours
                if not self.process_manager.is_running():
                    logger.info(f"[{self.name}] ‚ÑπÔ∏è Processus FFmpeg arr√™t√©, s√©lection du prochain fichier")
                    
                    # Prendre un nouveau fichier au hasard
                    if not self.processed_videos:
                        logger.error(f"[{self.name}] ‚ùå Plus de fichiers disponibles")
                        break
                    
                    # V√©rifier que la liste des fichiers est √† jour
                    self._scan_videos_async()
                    
                    # S√©lectionner un fichier al√©atoire
                    video_file = random.choice(self.processed_videos)
                    if not video_file.exists():
                        logger.warning(f"[{self.name}] ‚ö†Ô∏è Fichier s√©lectionn√© n'existe pas: {video_file}")
                        continue
                    
                    # Mettre √† jour le fichier actuel
                    self.current_video_file = video_file
                    
                    # Obtenir la dur√©e du fichier
                    try:
                        duration = get_accurate_duration(video_file)
                        if duration and duration > 0:
                            self.current_file_duration = duration
                            logger.info(f"[{self.name}] ‚ÑπÔ∏è Dur√©e du fichier: {duration:.2f}s")
                        else:
                            logger.warning(f"[{self.name}] ‚ö†Ô∏è Impossible de d√©terminer la dur√©e")
                            self.current_file_duration = 300  # Valeur par d√©faut
                    except Exception as e:
                        logger.warning(f"[{self.name}] ‚ö†Ô∏è Erreur calcul dur√©e: {e}")
                        self.current_file_duration = 300  # Valeur par d√©faut
                    
                    # R√©initialiser la position
                    self.last_logged_position = 0
                    
                    logger.info(f"[{self.name}] üé• Changement de fichier: {video_file.name}")
                    
                    # D√©marrer un nouveau processus FFmpeg avec ce fichier
                    hls_dir = Path(f"/app/hls/{self.name}")
                    progress_file = f"/app/logs/ffmpeg/{self.name}_progress.log"
                    
                    command = [
                        "ffmpeg",
                        "-hide_banner",
                        "-loglevel", "info",
                        "-y",
                        "-thread_queue_size", "4096",
                        "-analyzeduration", "5M",
                        "-probesize", "5M",
                        "-re",
                        "-fflags", "+genpts+igndts+discardcorrupt",
                        "-threads", "2",
                        "-avoid_negative_ts", "make_zero",
                        "-progress", progress_file,
                        "-i", str(video_file),
                        "-c:v", "copy",
                        "-c:a", "copy",
                        "-sn", "-dn",
                        "-map", "0:v:0",
                        "-map", "0:a:0?",
                        "-max_muxing_queue_size", "2048",
                        "-fps_mode", "passthrough",
                        "-f", "hls",
                        "-hls_time", "2",
                        "-hls_list_size", "6",
                        "-hls_delete_threshold", "1",
                        "-hls_flags", "delete_segments+append_list+independent_segments",
                        "-hls_allow_cache", "1",
                        "-start_number", "0",
                        "-hls_segment_type", "mpegts",
                        "-max_delay", "1000000",
                        "-hls_init_time", "1",
                        "-hls_segment_filename", f"{str(hls_dir)}/segment_%d.ts",
                        f"{str(hls_dir)}/playlist.m3u8"
                    ]
                    
                    success = self.process_manager.start_process(command, str(hls_dir))
                    if not success:
                        logger.error(f"[{self.name}] ‚ùå √âchec du changement de fichier")
                        time.sleep(5)  # Attendre avant de r√©essayer
                
                # V√©rifier si on approche de la fin du fichier actuel
                elif hasattr(self, "last_logged_position") and hasattr(self, "current_file_duration"):
                    if self.last_logged_position > self.current_file_duration - 10:
                        logger.info(f"[{self.name}] ‚è±Ô∏è Fin de fichier imminente, pr√©paration du changement")
                        # Arr√™ter le processus pour passer au fichier suivant
                        self.process_manager.stop_process()
                        time.sleep(2)  # Petite pause avant de d√©marrer le suivant
                
                # Pause avant la prochaine v√©rification
                time.sleep(5)
                
        except Exception as e:
            logger.error(f"[{self.name}] ‚ùå Erreur dans le gestionnaire de fichiers: {e}")

    def _scan_videos(self) -> bool:
        """Scanne les fichiers vid√©os et met √† jour processed_videos"""
        try:
            source_dir = Path(self.video_dir)
            ready_to_stream_dir = source_dir / "ready_to_stream"

            # Cr√©ation du dossier s'il n'existe pas
            ready_to_stream_dir.mkdir(exist_ok=True)

            # On scanne les vid√©os dans ready_to_stream
            mp4_files = list(ready_to_stream_dir.glob("*.mp4"))

            if not mp4_files:
                logger.warning(f"[{self.name}] ‚ö†Ô∏è Aucun fichier MP4 dans {ready_to_stream_dir}")
                self.ready_for_streaming = False
                return False

            # Log des fichiers trouv√©s
            logger.info(f"[{self.name}] üîç {len(mp4_files)} fichiers MP4 trouv√©s dans ready_to_stream")

            # V√©rification que les fichiers sont valides
            valid_files = []
            for video_file in mp4_files:
                if verify_file_ready(video_file):
                    valid_files.append(video_file)
                else:
                    logger.warning(f"[{self.name}] ‚ö†Ô∏è Fichier {video_file.name} ignor√© car non valide")

            if valid_files:
                self.processed_videos = valid_files
                logger.info(f"[{self.name}] ‚úÖ {len(valid_files)} vid√©os valides trouv√©es dans ready_to_stream")

                # La cha√Æne est pr√™te si on a des vid√©os valides
                self.ready_for_streaming = True
                return True
            else:
                logger.warning(f"[{self.name}] ‚ö†Ô∏è Aucun fichier MP4 valide trouv√© dans ready_to_stream")
                self.ready_for_streaming = False
                return False

        except Exception as e:
            logger.error(f"[{self.name}] ‚ùå Erreur scan des vid√©os: {str(e)}")
            import traceback
            logger.error(f"[{self.name}] {traceback.format_exc()}")
            return False

    def is_running(self) -> bool:
        """V√©rifie si la cha√Æne est actuellement en streaming"""
        return self.process_manager.is_running()

    def check_stream_health(self):
        """
        V√©rifie la sant√© du stream avec une approche plus tol√©rante
        Logge les probl√®mes mais ne force pas le red√©marrage imm√©diatement
        """
        try:
            # Initialiser le compteur d'avertissements si n√©cessaire
            if not hasattr(self, "_health_check_warnings"):
                self._health_check_warnings = 0
                self._last_health_check_time = time.time()
            
            # R√©initialiser p√©riodiquement les avertissements (toutes les 30 minutes)
            if time.time() - getattr(self, "_last_health_check_time", 0) > 1800:
                self._health_check_warnings = 0
                self._last_health_check_time = time.time()
                logger.info(f"[{self.name}] R√©initialisation p√©riodique des avertissements de sant√©")
            
            # V√©rifier l'√©tat de base: processus en cours?
            if not self.process_manager.is_running():
                logger.warning(f"[{self.name}] ‚ö†Ô∏è Processus FFmpeg inactif")
                self._health_check_warnings += 1
                
                # Seuil de tol√©rance plus √©lev√©
                if self._health_check_warnings >= 3 and getattr(self, "watchers_count", 0) > 0:
                    logger.warning(f"[{self.name}] ‚ö†Ô∏è {self._health_check_warnings} avertissements accumul√©s, tentative de red√©marrage")
                    self._health_check_warnings = 0
                    return self._restart_stream()
                else:
                    logger.info(f"[{self.name}] Avertissement {self._health_check_warnings}/3 (attente avant action)")
                    return False
            
            # Processus en cours, sant√© OK
            if self._health_check_warnings > 0:
                self._health_check_warnings -= 1  # R√©duction progressive des avertissements
                logger.info(f"[{self.name}] ‚úÖ Sant√© am√©lior√©e, avertissements: {self._health_check_warnings}")
            
            return True
            
        except Exception as e:
            logger.error(f"[{self.name}] ‚ùå Erreur v√©rification sant√©: {e}")
            return False
            
    def check_watchers_timeout(self):
        """V√©rifie si le stream doit √™tre arr√™t√© en raison d'une absence de watchers"""
        # On ne v√©rifie pas le timeout s'il n'y a pas de watchers_count
        if not hasattr(self, "watchers_count"):
            return False
            
        # On ne v√©rifie pas le timeout si le stream n'est pas actif
        if not self.process_manager.is_running():
            return False
            
        # On ne v√©rifie pas le timeout s'il y a des watchers actifs
        if self.watchers_count > 0:
            return False
            
        # On ne v√©rifie pas le timeout s'il y a des erreurs critiques
        if self.error_handler.has_critical_errors():
            return False
            
        # Le stream continue de tourner m√™me sans watchers
        return False 