# ffmpeg_process_manager.py
import os
import time
import signal
import psutil
import threading
import subprocess
from pathlib import Path
from config import logger
import traceback
from typing import Callable, Optional
from datetime import datetime

# Constante pour le seuil de d√©tection des probl√®mes
# Plus √©lev√© = plus tol√©rant aux d√©lais entre segments
CRASH_THRESHOLD = 30  # 30 secondes sans nouveau segment avant d'√™tre consid√©r√© comme probl√©matique

class FFmpegProcessManager:
    """
    # Gestion centralis√©e des processus FFmpeg
    # D√©marrage, arr√™t, surveillance
    """

    # Registre global des instances
    all_channels = {}

    def __init__(self, channel_name, logger_instance=None):
        self.channel_name = channel_name
        self.process = None
        self.lock = threading.Lock()
        self.monitor_thread = None
        self.stop_monitoring = threading.Event()
        self.last_playback_time = 0
        self.playback_offset = 0
        self.total_duration = 0
        self.logger_instance = logger_instance
        
        # √âtat de sant√© et compteurs
        self.last_segment_time = time.time()  # Initialisation
        self.crash_count = 0
        self.last_crash_time = 0
        self.health_warnings = 0  # Compteur d'avertissements de sant√©

        # Callbacks
        self.on_process_died = None
        self.on_position_update = None
        self.on_segment_created = None

        # Enregistrement global
        FFmpegProcessManager.all_channels[channel_name] = self

    def is_running(self) -> bool:
        """V√©rifie si le processus est en cours d'ex√©cution"""
        return self.process is not None and self.process.poll() is None

    def get_pid(self) -> Optional[int]:
        """Retourne le PID du processus actuel s'il existe"""
        if self.process:
            return self.process.pid
        return None

    def start_process(self, command, hls_dir) -> bool:
        """D√©marre un processus FFmpeg avec la commande sp√©cifi√©e"""
        with self.lock:
            # --- Modified: Stop existing process if running --- 
            if self.is_running():
                logger.warning(f"[{self.channel_name}] Un processus FFmpeg est d√©j√† en cours, tentative d'arr√™t...")
                if not self.stop_process(timeout=5): # Try to stop it gracefully
                    logger.error(f"[{self.channel_name}] ‚ùå Impossible d'arr√™ter le processus existant, abandon du d√©marrage.")
                    return False
                # Short delay to allow resources to release
                time.sleep(1.0)
                if self.is_running(): # Double-check if stop actually worked
                    logger.error(f"[{self.channel_name}] ‚ùå Le processus existant est toujours en cours apr√®s tentative d'arr√™t, abandon.")
                    return False
                logger.info(f"[{self.channel_name}] ‚úÖ Ancien processus arr√™t√©.")
            # --- End Modification ---

            # Nettoyer les processus existants (zombies)
            self._clean_zombie_processes()

            # Cr√©er le dossier HLS si n√©cessaire
            os.makedirs(hls_dir, exist_ok=True)

            try:
                # V√©rifier que le fichier d'entr√©e existe
                input_file = None
                for i, arg in enumerate(command):
                    if arg == "-i" and i + 1 < len(command):
                        input_file = command[i + 1]
                        break
                
                if input_file and not os.path.exists(input_file):
                    logger.error(f"[{self.channel_name}] ‚ùå Fichier d'entr√©e introuvable: {input_file}")
                    return False

                # D√©marrer le processus
                logger.info(f"[{self.channel_name}] üöÄ D√©marrage FFmpeg: {' '.join(command[:5])}...")
                
                # D√©finir le chemin du fichier log FFmpeg
                ffmpeg_log_path = Path(f"/app/logs/ffmpeg/{self.channel_name}_ffmpeg.log")
                # S'assurer que le dossier de logs existe
                ffmpeg_log_path.parent.mkdir(parents=True, exist_ok=True)
                
                # Ouvrir le fichier log en mode append ('a') pour stderr
                stderr_log_file = open(ffmpeg_log_path, 'a')
                
                self.process = subprocess.Popen(
                    command,
                    stdout=subprocess.PIPE, # Garder stdout en pipe si n√©cessaire
                    stderr=stderr_log_file, # Rediriger stderr vers le fichier log
                    text=True
                )
                # Enregistrer le temps de d√©marrage pour la p√©riode de gr√¢ce
                self.start_time = time.time()
                
                # Le descripteur de fichier peut √™tre ferm√© par le script Python apr√®s le d√©marrage de Popen,
                # le sous-processus conserve son propre descripteur ouvert.
                stderr_log_file.close() 
                
                # Attendre un peu pour voir si le processus d√©marre correctement
                time.sleep(2)
                
                # V√©rifier si le processus est toujours en cours
                if self.process.poll() is not None:
                    error_output = self.process.stderr.read() if self.process.stderr else "Pas de sortie d'erreur"
                    logger.error(f"[{self.channel_name}] ‚ùå FFmpeg a √©chou√© √† d√©marrer: {error_output}")
                    return False
                
                # R√©initialiser les compteurs d'√©tat
                self.last_segment_time = time.time()
                self.health_warnings = 0
                
                # D√©marrer la surveillance
                self._start_monitoring(hls_dir)
                
                # V√©rifier la cr√©ation du premier segment
                segment_check_start = time.time()
                while time.time() - segment_check_start < 10:  # Attendre jusqu'√† 10 secondes
                    if any(Path(hls_dir).glob("segment_*.ts")):
                        logger.info(f"[{self.channel_name}] ‚úÖ Premier segment cr√©√© avec succ√®s")
                        return True
                    time.sleep(1)
                
                logger.warning(f"[{self.channel_name}] ‚ö†Ô∏è Aucun segment cr√©√© apr√®s 10 secondes")
                return True  # On retourne True quand m√™me car le processus est en cours
                
            except Exception as e:
                logger.error(f"[{self.channel_name}] ‚ùå Erreur d√©marrage FFmpeg: {e}")
                if self.process:
                    self.process.terminate()
                    self.process = None
                return False

    def stop_process(self, timeout: int = 5) -> bool:
        """Arr√™te proprement le processus FFmpeg"""
        with self.lock:
            if not self.is_running():
                return True

            try:
                # Arr√™ter la surveillance
                if self.monitor_thread and self.monitor_thread.is_alive():
                    self.stop_monitoring.set()
                
                pid_to_stop = self.process.pid if self.process else None
                logger.info(f"[{self.channel_name}] üõë Arr√™t du processus FFmpeg PID {pid_to_stop}")

                if pid_to_stop:
                    try:
                        p = psutil.Process(pid_to_stop)
                        # Tenter un arr√™t propre
                        p.terminate() 
                        
                        # Attendre plus longtemps pour l'arr√™t normal
                        try:
                            p.wait(timeout=timeout + 5) # Increased timeout
                            logger.info(f"[{self.channel_name}] ‚úÖ Processus {pid_to_stop} arr√™t√© proprement.")
                        except psutil.TimeoutExpired:
                            # Kill forc√© si n√©cessaire
                            logger.warning(f"[{self.channel_name}] ‚ö†Ô∏è Kill forc√© du processus FFmpeg PID {pid_to_stop}")
                            p.kill()
                            time.sleep(1.0) # Allow time for kill
                            
                            # V√©rification finale
                            if p.is_running():
                                logger.error(f"[{self.channel_name}] ‚ùå √âchec du kill forc√© pour PID {pid_to_stop}")
                            else:
                                logger.info(f"[{self.channel_name}] ‚úÖ Processus {pid_to_stop} tu√© avec succ√®s.")
                                
                    except psutil.NoSuchProcess:
                        logger.info(f"[{self.channel_name}] ‚úÖ Processus {pid_to_stop} d√©j√† arr√™t√©.")
                    except Exception as e:
                         logger.error(f"[{self.channel_name}] ‚ùå Erreur lors de l'arr√™t du processus {pid_to_stop}: {e}")

                # Nettoyage final
                self.process = None 
                return True

            except Exception as e:
                logger.error(f"[{self.channel_name}] ‚ùå Erreur arr√™t FFmpeg: {e}")
                return False

    def _clean_zombie_processes(self):
        """Nettoie les processus FFmpeg orphelins pour cette cha√Æne"""
        try:
            pattern = f"/hls/{self.channel_name}/"
            current_pid = self.get_pid()
            processes_killed = 0

            for proc in psutil.process_iter(["pid", "name", "cmdline"]):
                try:
                    # V√©rifier si c'est ffmpeg
                    if "ffmpeg" not in proc.info["name"].lower():
                        continue

                    # V√©rifier si c'est pour notre cha√Æne
                    cmdline = " ".join(proc.info["cmdline"] or [])
                    if pattern not in cmdline:
                        continue

                    # Sauter notre propre processus g√©r√©
                    if current_pid and proc.info["pid"] == current_pid:
                        continue
                        
                    # V√©rifier si le processus existe toujours
                    if not psutil.pid_exists(proc.info['pid']):
                        continue

                    # Tuer le processus orphelin
                    logger.warning(f"[{self.channel_name}] üßπ Nettoyage du processus FFmpeg orphelin PID {proc.info['pid']}")
                    try:
                        proc.kill()
                        processes_killed += 1
                        # Attente courte pour laisser le syst√®me traiter le kill
                        time.sleep(0.1)
                    except psutil.NoSuchProcess:
                        logger.info(f"[{self.channel_name}] üí® Processus {proc.info['pid']} d√©j√† termin√©.")
                        pass # Process already gone

                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
                except Exception as e:
                    logger.warning(f"[{self.channel_name}] ‚ö†Ô∏è Erreur nettoyage: {e}")

            if processes_killed > 0:
                time.sleep(1)  # Attendre que les processus se terminent

        except Exception as e:
            logger.error(f"[{self.channel_name}] ‚ùå Erreur nettoyage global: {e}")

    def _start_monitoring(self, hls_dir):
        """D√©marre le thread de surveillance"""
        if self.monitor_thread and self.monitor_thread.is_alive():
            self.stop_monitoring.set()
            if self.monitor_thread != threading.current_thread():
                try:
                    self.monitor_thread.join(timeout=3)
                except RuntimeError:
                    pass
            self.stop_monitoring.clear()

        self.monitor_thread = threading.Thread(
            target=self._monitor_process,
            daemon=True
        )
        self.monitor_thread.start()

    def _monitor_process(self):
        """Surveillance du processus FFmpeg"""
        try:
            # Intervalles de v√©rification
            health_check_interval = 60  # V√©rification de sant√© toutes les 60 secondes
            startup_grace_period = 15  # P√©riode de gr√¢ce au d√©marrage
            
            last_health_check = time.time()
            startup_time = time.time()
            
            while not self.stop_monitoring.is_set():
                # 1. V√©rification de base: processus toujours en vie?
                if not self.is_running():
                    return_code = self.process.poll() if self.process else -999
                    logger.error(f"[{self.channel_name}] ‚ùå Processus FFmpeg arr√™t√© (code: {return_code})")
                    if self.on_process_died:
                        self.on_process_died(return_code, None)
                    break

                # 2. V√©rification p√©riodique de la sant√©
                current_time = time.time()
                if current_time - last_health_check >= health_check_interval:
                    # P√©riode de gr√¢ce au d√©marrage
                    if current_time - startup_time > startup_grace_period:
                        self.check_stream_health()
                    last_health_check = current_time
                
                # Pause courte pour √©conomiser des ressources
                time.sleep(1)
                
        except Exception as e:
            logger.error(f"[{self.channel_name}] ‚ùå Erreur surveillance: {e}")
            if self.on_process_died:
                self.on_process_died(-1, str(e))

    def check_stream_health(self) -> bool:
        """V√©rifie la sant√© du stream HLS"""
        try:
            # V√©rification de base du processus
            if not self.is_running():
                return False

            # R√©cup√©ration du r√©pertoire HLS
            hls_dir = f"/app/hls/{self.channel_name}"
            if not hls_dir or not Path(hls_dir).exists():
                logger.error(f"[{self.channel_name}] ‚ùå R√©pertoire HLS introuvable")
                return False

            # V√©rification des segments TS
            ts_files = list(Path(hls_dir).glob("*.ts"))
            if not ts_files:
                logger.warning(f"[{self.channel_name}] ‚ö†Ô∏è Aucun segment TS trouv√©")
                return True  # On continue √† surveiller

            # Log d√©taill√© des segments pour diagnostic
            logger.info(f"[{self.channel_name}] üìä {len(ts_files)} segments trouv√©s")
            
            # V√©rification de la boucle infinie
            if len(ts_files) > 5:  # R√©duit de 10 √† 5 segments minimum
                # On trie les segments par date de modification
                ts_files.sort(key=lambda x: x.stat().st_mtime)
                
                # On v√©rifie les 3 derniers segments (r√©duit de 5 √† 3)
                last_segments = ts_files[-3:]
                segment_sizes = [f.stat().st_size for f in last_segments]
                
                # Log des tailles pour diagnostic
                logger.info(f"[{self.channel_name}] üìè Tailles des 3 derniers segments: {segment_sizes}")
                
                # Si les 3 derniers segments ont exactement la m√™me taille
                if len(set(segment_sizes)) == 1:
                    logger.warning(f"[{self.channel_name}] ‚ö†Ô∏è D√©tection possible de boucle infinie - segments identiques de taille {segment_sizes[0]}")
                    self.health_warnings += 1
                    
                    if self.health_warnings >= 2:  # R√©duit de 3 √† 2 avertissements
                        logger.error(f"[{self.channel_name}] ‚ùå BOUCLE INFINIE CONFIRM√âE - red√©marrage du stream")
                        if self.on_process_died:
                            self.on_process_died(-3, "Boucle infinie d√©tect√©e")
                        return False

            # V√©rification du temps √©coul√© depuis le dernier segment
            latest_segment_time = max(f.stat().st_mtime for f in ts_files)
            current_time = time.time()
            elapsed = current_time - latest_segment_time

            # Seuil de tol√©rance pour les segments (en secondes)
            segment_threshold = 45  # Augment√© de 30 √† 45 secondes

            # Collecter des m√©triques syst√®me
            cpu_usage = psutil.cpu_percent(interval=1)
            memory_usage = psutil.virtual_memory()
            memory_usage_mb = memory_usage.used / (1024 * 1024)

            # V√©rification de la taille moyenne des segments
            total_size = sum(f.stat().st_size for f in ts_files)
            average_segment_size = total_size / len(ts_files) if ts_files else 0

            # Collecter des m√©triques pour les probl√®mes
            if elapsed > segment_threshold:
                # AJOUT: V√©rifier si le processus vient de d√©marrer
                grace_period = 60 # secondes de gr√¢ce apr√®s le d√©marrage
                process_uptime = current_time - getattr(self, 'start_time', 0)
                if process_uptime < grace_period:
                    logger.info(f"[{self.channel_name}] ‚úÖ Health check deferred: process recently started ({process_uptime:.1f}s ago).")
                    return True # Continuer la surveillance sans avertissement pendant la p√©riode de gr√¢ce

                # Log d√©taill√© des m√©triques syst√®me (si hors p√©riode de gr√¢ce)
                logger.warning(f"[{self.channel_name}] ‚ö†Ô∏è Pas de segment trait√© depuis {elapsed:.1f}s | CPU: {cpu_usage:.1f}% | RAM: {memory_usage_mb:.1f}MB")
                
                # Accumulation d'avertissements plut√¥t que d√©cision imm√©diate
                self.health_warnings += 1
                
                # S'assurer que le compteur ne d√©passe pas 5 pour la logique de traitement
                health_warnings_for_display = min(self.health_warnings, 5)
                
                logger.warning(f"[{self.channel_name}] üö® Avertissement sant√© {health_warnings_for_display}/5 - Dernier segment il y a {elapsed:.1f}s")
                
                # V√©rification des logs FFmpeg pour indices suppl√©mentaires
                try:
                    ffmpeg_log = Path(f"/app/logs/ffmpeg/{self.channel_name}_ffmpeg.log")
                    if ffmpeg_log.exists():
                        # Lire les 5 derni√®res lignes du log
                        with open(ffmpeg_log, 'r') as f:
                            lines = f.readlines()
                            last_lines = lines[-10:] if len(lines) >= 10 else lines
                            log_excerpt = "".join(last_lines).strip()
                            
                            # V√©rifier des probl√®mes connus dans les logs
                            issues = []
                            if "error" in log_excerpt.lower():
                                issues.append("Erreur FFmpeg d√©tect√©e")
                            if "dropping" in log_excerpt.lower():
                                issues.append("FFmpeg abandonne des frames")
                            if "delay" in log_excerpt.lower() and "too large" in log_excerpt.lower():
                                issues.append("D√©lai trop important")
                            if "stalled" in log_excerpt.lower():
                                issues.append("Lecture bloqu√©e")
                            
                            if issues:
                                logger.warning(f"[{self.channel_name}] üìù Probl√®mes d√©tect√©s dans les logs FFmpeg: {', '.join(issues)}")
                                logger.warning(f"[{self.channel_name}] üìù Extrait des logs FFmpeg:\n{log_excerpt}")
                except Exception as e:
                    logger.debug(f"[{self.channel_name}] Impossible de lire les logs FFmpeg: {e}")
                
                # D√©cider d'un probl√®me seulement apr√®s 5 avertissements
                if self.health_warnings >= 5:
                    # Diagnostic d√©taill√©
                    diagnosis = "Aucun segment trait√© (g√©n√©ration ou t√©l√©chargement)"
                    if len(ts_files) > 0 and (current_time - latest_segment_time) < 30:
                        diagnosis = "Segments g√©n√©r√©s mais non t√©l√©charg√©s par les clients"
                    elif cpu_usage > 90:
                        diagnosis = f"CPU surcharg√© ({cpu_usage:.1f}%), FFmpeg ne peut pas g√©n√©rer les segments assez rapidement"
                    elif len(ts_files) == 0:
                        diagnosis = "Aucun segment g√©n√©r√©, FFmpeg a peut-√™tre des probl√®mes avec le fichier source"
                    
                    logger.error(f"[{self.channel_name}] ‚ùå PROBL√àME DE SANT√â CONFIRM√â apr√®s {self.health_warnings} avertissements")
                    logger.error(f"[{self.channel_name}] üìä R√©sum√©: {elapsed:.1f}s sans segment | CPU: {cpu_usage:.1f}% | {len(ts_files)} segments TS")
                    logger.error(f"[{self.channel_name}] üîç DIAGNOSTIC: {diagnosis}")
                    
                    # Notifier seulement apr√®s confirmation du probl√®me
                    if self.on_process_died:
                        # Structurer les informations de diagnostic pour le callback
                        error_details = {
                            "type": "health_check_failed",
                            "elapsed": elapsed,
                            "cpu_usage": cpu_usage,
                            "segments_count": len(ts_files),
                            "diagnosis": diagnosis,
                            "average_segment_size": average_segment_size
                        }
                        
                        self.on_process_died(-2, str(error_details))
                    return False
                
                # Continuer √† surveiller si pas assez d'avertissements
                return True
            else:
                # Sant√© normale - log p√©riodique pour surveillance
                if (int(current_time) % 300) < 1:  # Log toutes les ~5 minutes 
                    logger.debug(f"[{self.channel_name}] ‚úÖ Sant√© OK: dernier segment il y a {elapsed:.1f}s | CPU: {cpu_usage:.1f}%")
                
                # R√©initialiser les avertissements si tout va bien
                if self.health_warnings > 0:
                    logger.info(f"[{self.channel_name}] ‚úÖ Stream de nouveau en bonne sant√© (dernier segment il y a {elapsed:.1f}s)")
                    self.health_warnings = 0
        
            # Processus en vie et sant√© OK
            return True
        except Exception as e:
            logger.error(f"[{self.channel_name}] ‚ùå Erreur v√©rification sant√©: {e}")
            return False

    def on_new_segment(self, segment_path, size):
        """Appel√© quand un nouveau segment est cr√©√©"""
        # Mise √† jour du timestamp de dernier segment
        self.last_segment_time = time.time()
        
        # R√©initialiser le compteur d'avertissements
        self.health_warnings = 0
        
        # Appeler le callback externe si disponible
        if self.on_segment_created:
            self.on_segment_created(segment_path, size)

    def set_playback_offset(self, offset):
        """D√©finit l'offset de lecture"""
        self.playback_offset = offset

    def get_playback_offset(self):
        """R√©cup√®re l'offset de lecture actuel"""
        return self.playback_offset

    def set_total_duration(self, duration):
        """D√©finit la dur√©e totale de la playlist"""
        self.total_duration = duration
        logger.info(f"[{self.channel_name}] Dur√©e totale d√©finie: {duration:.2f}s")

    def restart_process(self):
        """Red√©marre le processus FFmpeg de fa√ßon simplifi√©e"""
        try:
            # M√©moriser l'√©tat et la commande actuelle
            was_running = self.is_running()
            current_offset = self.get_playback_offset() if was_running else 0
            command = self.process.args if self.process else None
            
            if not was_running or not command:
                logger.warning(f"[{self.channel_name}] ‚ö†Ô∏è Impossible de red√©marrer: processus inactif ou commande inconnue")
                return False
                
            # Extraction du dossier HLS
            hls_dir = command[-1].rsplit('/', 1)[0]
            
            # Arr√™ter proprement
            self.stop_process()
            time.sleep(2)
            
            # Red√©marrer
            success = self.start_process(command, hls_dir)
            
            if success:
                # Restaurer la position
                self.set_playback_offset(current_offset)
                logger.info(f"[{self.channel_name}] ‚úÖ Red√©marrage r√©ussi")
                return True
            else:
                logger.error(f"[{self.channel_name}] ‚ùå √âchec du red√©marrage")
                return False
                
        except Exception as e:
            logger.error(f"[{self.channel_name}] ‚ùå Erreur lors du red√©marrage: {e}")
            return False
