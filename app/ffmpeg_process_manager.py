# ffmpeg_process_manager.py
import os
import time
import signal
import psutil
import threading
import subprocess
from pathlib import Path
from config import logger
import traceback
from typing import Callable, Optional
from datetime import datetime

# Constante pour le seuil de d√©tection des probl√®mes
# Plus √©lev√© = plus tol√©rant aux d√©lais entre segments
CRASH_THRESHOLD = 30  # 30 secondes sans nouveau segment avant d'√™tre consid√©r√© comme probl√©matique

class FFmpegProcessManager:
    """
    # Gestion centralis√©e des processus FFmpeg
    # D√©marrage, arr√™t, surveillance
    """

    # Registre global des instances
    all_channels = {}

    def __init__(self, channel_name, logger_instance=None):
        self.channel_name = channel_name
        self.process = None
        self.lock = threading.Lock()
        self.monitor_thread = None
        self.stop_monitoring = threading.Event()
        self.last_playback_time = 0
        self.playback_offset = 0
        self.total_duration = 0
        self.logger_instance = logger_instance
        
        # √âtat de sant√© et compteurs
        self.last_segment_time = time.time()  # Initialisation
        self.crash_count = 0
        self.last_crash_time = 0
        self.health_warnings = 0  # Compteur d'avertissements de sant√©

        # Callbacks
        self.on_process_died = None
        self.on_position_update = None
        self.on_segment_created = None

        # Enregistrement global
        FFmpegProcessManager.all_channels[channel_name] = self

    def is_running(self) -> bool:
        """V√©rifie si le processus est en cours d'ex√©cution"""
        return self.process is not None and self.process.poll() is None

    def get_pid(self) -> Optional[int]:
        """Retourne le PID du processus actuel s'il existe"""
        if self.process:
            return self.process.pid
        return None

    def start_process(self, command, hls_dir) -> bool:
        """D√©marre un processus FFmpeg avec la commande sp√©cifi√©e"""
        with self.lock:
            # V√©rifier si un processus est d√©j√† en cours
            if self.is_running():
                logger.warning(f"[{self.channel_name}] Un processus FFmpeg est d√©j√† en cours")
                return False

            # Nettoyer les processus existants
            self._clean_zombie_processes()

            # Cr√©er le dossier HLS si n√©cessaire
            os.makedirs(hls_dir, exist_ok=True)

            try:
                # D√©marrer le processus
                logger.info(f"[{self.channel_name}] üöÄ D√©marrage FFmpeg: {' '.join(command[:5])}...")
                self.process = subprocess.Popen(
                    command,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True
                )
                
                # R√©initialiser les compteurs d'√©tat
                self.last_segment_time = time.time()
                self.health_warnings = 0
                
                # D√©marrer la surveillance
                self._start_monitoring(hls_dir)
                
                return True
                
            except Exception as e:
                logger.error(f"[{self.channel_name}] ‚ùå Erreur d√©marrage FFmpeg: {e}")
                return False

    def stop_process(self, timeout: int = 5) -> bool:
        """Arr√™te proprement le processus FFmpeg"""
        with self.lock:
            if not self.is_running():
                return True

            try:
                # Arr√™ter la surveillance
                if self.monitor_thread and self.monitor_thread.is_alive():
                    self.stop_monitoring.set()
                
                pid = self.process.pid if self.process else None
                logger.info(f"[{self.channel_name}] üõë Arr√™t du processus FFmpeg PID {pid}")

                # Tenter un arr√™t propre
                self.process.terminate()
                
                try:
                    self.process.wait(timeout=timeout)
                except subprocess.TimeoutExpired:
                    # Kill forc√© si n√©cessaire
                    logger.warning(f"[{self.channel_name}] ‚ö†Ô∏è Kill forc√© du processus FFmpeg")
                    self.process.kill()
                    time.sleep(0.5)

                # Nettoyage final
                self.process = None
                return True

            except Exception as e:
                logger.error(f"[{self.channel_name}] ‚ùå Erreur arr√™t FFmpeg: {e}")
                return False

    def _clean_zombie_processes(self):
        """Nettoie les processus FFmpeg orphelins pour cette cha√Æne"""
        try:
            pattern = f"/hls/{self.channel_name}/"
            processes_killed = 0

            for proc in psutil.process_iter(["pid", "name", "cmdline"]):
                try:
                    # V√©rifier si c'est ffmpeg
                    if "ffmpeg" not in proc.info["name"].lower():
                        continue

                    # V√©rifier si c'est pour notre cha√Æne
                    cmdline = " ".join(proc.info["cmdline"] or [])
                    if pattern not in cmdline:
                        continue

                    # Sauter notre propre processus
                    if self.process and proc.info["pid"] == self.process.pid:
                        continue

                    # Tuer le processus orphelin
                    logger.info(f"[{self.channel_name}] üßπ Nettoyage processus {proc.info['pid']}")
                    proc.kill()
                    processes_killed += 1

                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
                except Exception as e:
                    logger.warning(f"[{self.channel_name}] ‚ö†Ô∏è Erreur nettoyage: {e}")

            if processes_killed > 0:
                time.sleep(1)  # Attendre que les processus se terminent

        except Exception as e:
            logger.error(f"[{self.channel_name}] ‚ùå Erreur nettoyage global: {e}")

    def _start_monitoring(self, hls_dir):
        """D√©marre le thread de surveillance"""
        if self.monitor_thread and self.monitor_thread.is_alive():
            self.stop_monitoring.set()
            if self.monitor_thread != threading.current_thread():
                try:
                    self.monitor_thread.join(timeout=3)
                except RuntimeError:
                    pass
            self.stop_monitoring.clear()

        self.monitor_thread = threading.Thread(
            target=self._monitor_process,
            daemon=True
        )
        self.monitor_thread.start()

    def _monitor_process(self):
        """Surveillance du processus FFmpeg"""
        try:
            # Intervalles de v√©rification
            health_check_interval = 60  # V√©rification de sant√© toutes les 60 secondes (√©tait 30)
            
            last_health_check = time.time()
            
            while not self.stop_monitoring.is_set():
                # 1. V√©rification de base: processus toujours en vie?
                if not self.is_running():
                    return_code = self.process.poll() if self.process else -999
                    logger.error(f"[{self.channel_name}] ‚ùå Processus FFmpeg arr√™t√© (code: {return_code})")
                    if self.on_process_died:
                        self.on_process_died(return_code)
                    break

                # 2. V√©rification p√©riodique de la sant√©
                current_time = time.time()
                if current_time - last_health_check >= health_check_interval:
                    self.check_stream_health()
                    last_health_check = current_time
                
                # Pause courte pour √©conomiser des ressources
                time.sleep(1)
                
        except Exception as e:
            logger.error(f"[{self.channel_name}] ‚ùå Erreur surveillance: {e}")
            if self.on_process_died:
                self.on_process_died(-1, str(e))

    def check_stream_health(self) -> bool:
        """
        V√©rifie l'√©tat de sant√© du stream avec une approche plus tol√©rante
        Retourne False uniquement si probl√®me grave et r√©p√©t√©
        """
        # Si le processus n'est pas en cours, pas besoin d'analyser
        if not self.is_running():
            logger.warning(f"[{self.channel_name}] ‚ö†Ô∏è Check de sant√©: processus inactif")
            return False
            
        # V√©rifier le temps √©coul√© depuis le dernier segment
        if hasattr(self, "last_segment_time"):
            current_time = time.time()
            elapsed = current_time - self.last_segment_time
            # Augmenter le seuil pour √™tre plus tol√©rant
            segment_threshold = CRASH_THRESHOLD * 3  # 90 secondes sans segment (√©tait 2x=60s)
            
            # V√©rifier l'utilisation CPU du processus
            cpu_usage = 0
            memory_usage_mb = 0
            try:
                if self.process:
                    pid = self.process.pid
                    process = psutil.Process(pid)
                    cpu_usage = process.cpu_percent(interval=0.1)
                    memory_usage_mb = process.memory_info().rss / (1024 * 1024)
            except Exception as e:
                logger.debug(f"[{self.channel_name}] Impossible de v√©rifier les ressources: {e}")
            
            # V√©rification des segments dans le dossier HLS et leur date de cr√©ation
            hls_dir = f"/app/hls/{self.channel_name}"
            ts_files = 0
            latest_segment_time = 0
            oldest_segment_time = current_time
            average_segment_size = 0
            
            try:
                ts_files_list = list(Path(hls_dir).glob("*.ts"))
                ts_files = len(ts_files_list)
                playlist_exists = Path(f"{hls_dir}/playlist.m3u8").exists()
                
                # Analyser les segments pour obtenir plus d'informations
                if ts_files > 0:
                    total_size = 0
                    for segment in ts_files_list:
                        stat = segment.stat()
                        total_size += stat.st_size
                        segment_time = stat.st_mtime
                        if segment_time > latest_segment_time:
                            latest_segment_time = segment_time
                        if segment_time < oldest_segment_time:
                            oldest_segment_time = segment_time
                    
                    average_segment_size = total_size / ts_files if ts_files > 0 else 0
                    segment_age = current_time - latest_segment_time if latest_segment_time > 0 else 0
                    segments_timespan = latest_segment_time - oldest_segment_time if latest_segment_time > oldest_segment_time else 0
                    
                    logger.warning(f"[{self.channel_name}] üìÇ Segments HLS: {ts_files} segments, dernier cr√©√© il y a {segment_age:.1f}s, taille moyenne: {average_segment_size/1024:.1f}KB")
                    
                    # V√©rifier si les segments sont g√©n√©r√©s mais pas t√©l√©charg√©s
                    if segment_age < 10 and elapsed > segment_threshold:
                        logger.warning(f"[{self.channel_name}] ‚ö†Ô∏è Segments g√©n√©r√©s mais non t√©l√©charg√©s! Dernier segment cr√©√© il y a {segment_age:.1f}s")
                else:
                    logger.warning(f"[{self.channel_name}] üìÇ Aucun segment trouv√© dans {hls_dir}, playlist: {playlist_exists}")
            except Exception as e:
                logger.warning(f"[{self.channel_name}] Erreur v√©rification HLS: {e}")
            
            # Collecter des m√©triques pour les probl√®mes
            if elapsed > segment_threshold:
                # Log d√©taill√© des m√©triques syst√®me
                logger.warning(f"[{self.channel_name}] ‚ö†Ô∏è Pas de segment trait√© depuis {elapsed:.1f}s | CPU: {cpu_usage:.1f}% | RAM: {memory_usage_mb:.1f}MB")
                
                # Accumulation d'avertissements plut√¥t que d√©cision imm√©diate
                self.health_warnings += 1
                
                # S'assurer que le compteur ne d√©passe pas 3 pour la logique de traitement
                health_warnings_for_display = min(self.health_warnings, 3)
                
                logger.warning(f"[{self.channel_name}] üö® Avertissement sant√© {health_warnings_for_display}/3 - Dernier segment il y a {elapsed:.1f}s")
                
                # V√©rification des logs FFmpeg pour indices suppl√©mentaires
                try:
                    ffmpeg_log = Path(f"/app/logs/ffmpeg/{self.channel_name}_ffmpeg.log")
                    if ffmpeg_log.exists():
                        # Lire les 5 derni√®res lignes du log
                        with open(ffmpeg_log, 'r') as f:
                            lines = f.readlines()
                            last_lines = lines[-10:] if len(lines) >= 10 else lines
                            log_excerpt = "".join(last_lines).strip()
                            
                            # V√©rifier des probl√®mes connus dans les logs
                            issues = []
                            if "error" in log_excerpt.lower():
                                issues.append("Erreur FFmpeg d√©tect√©e")
                            if "dropping" in log_excerpt.lower():
                                issues.append("FFmpeg abandonne des frames")
                            if "delay" in log_excerpt.lower() and "too large" in log_excerpt.lower():
                                issues.append("D√©lai trop important")
                            if "stalled" in log_excerpt.lower():
                                issues.append("Lecture bloqu√©e")
                            
                            if issues:
                                logger.warning(f"[{self.channel_name}] üìù Probl√®mes d√©tect√©s dans les logs FFmpeg: {', '.join(issues)}")
                                logger.warning(f"[{self.channel_name}] üìù Extrait des logs FFmpeg:\n{log_excerpt}")
                except Exception as e:
                    logger.debug(f"[{self.channel_name}] Impossible de lire les logs FFmpeg: {e}")
                
                # D√©cider d'un probl√®me seulement apr√®s 3 avertissements
                if self.health_warnings >= 3:
                    # Diagnostic d√©taill√©
                    diagnosis = "Aucun segment trait√© (g√©n√©ration ou t√©l√©chargement)"
                    if ts_files > 0 and (current_time - latest_segment_time) < 30:
                        diagnosis = "Segments g√©n√©r√©s mais non t√©l√©charg√©s par les clients"
                    elif cpu_usage > 90:
                        diagnosis = f"CPU surcharg√© ({cpu_usage:.1f}%), FFmpeg ne peut pas g√©n√©rer les segments assez rapidement"
                    elif ts_files == 0:
                        diagnosis = "Aucun segment g√©n√©r√©, FFmpeg a peut-√™tre des probl√®mes avec le fichier source"
                    
                    logger.error(f"[{self.channel_name}] ‚ùå PROBL√àME DE SANT√â CONFIRM√â apr√®s {self.health_warnings} avertissements")
                    logger.error(f"[{self.channel_name}] üìä R√©sum√©: {elapsed:.1f}s sans segment | CPU: {cpu_usage:.1f}% | {ts_files} segments TS")
                    logger.error(f"[{self.channel_name}] üîç DIAGNOSTIC: {diagnosis}")
                    
                    # Notifier seulement apr√®s confirmation du probl√®me
                    if self.on_process_died:
                        # Structurer les informations de diagnostic pour le callback
                        error_details = {
                            "type": "health_check_failed",
                            "elapsed": elapsed,
                            "cpu_usage": cpu_usage,
                            "segments_count": ts_files,
                            "diagnosis": diagnosis,
                            "average_segment_size": average_segment_size
                        }
                        
                        self.on_process_died(-2, str(error_details))
                    return False
                
                # Continuer √† surveiller si pas assez d'avertissements
                return True
            else:
                # Sant√© normale - log p√©riodique pour surveillance
                if (int(current_time) % 300) < 1:  # Log toutes les ~5 minutes 
                    logger.debug(f"[{self.channel_name}] ‚úÖ Sant√© OK: dernier segment il y a {elapsed:.1f}s | CPU: {cpu_usage:.1f}%")
                
                # R√©initialiser les avertissements si tout va bien
                if self.health_warnings > 0:
                    logger.info(f"[{self.channel_name}] ‚úÖ Stream de nouveau en bonne sant√© (dernier segment il y a {elapsed:.1f}s)")
                    self.health_warnings = 0
        
        # Processus en vie et sant√© OK
        return True

    def on_new_segment(self, segment_path, size):
        """Appel√© quand un nouveau segment est cr√©√©"""
        # Mise √† jour du timestamp de dernier segment
        self.last_segment_time = time.time()
        
        # R√©initialiser le compteur d'avertissements
        self.health_warnings = 0
        
        # Appeler le callback externe si disponible
        if self.on_segment_created:
            self.on_segment_created(segment_path, size)

    def set_playback_offset(self, offset):
        """D√©finit l'offset de lecture"""
        self.playback_offset = offset

    def get_playback_offset(self):
        """R√©cup√®re l'offset de lecture actuel"""
        return self.playback_offset

    def set_total_duration(self, duration):
        """D√©finit la dur√©e totale de la playlist"""
        self.total_duration = duration
        logger.info(f"[{self.channel_name}] Dur√©e totale d√©finie: {duration:.2f}s")

    def restart_process(self):
        """Red√©marre le processus FFmpeg de fa√ßon simplifi√©e"""
        try:
            # M√©moriser l'√©tat et la commande actuelle
            was_running = self.is_running()
            current_offset = self.get_playback_offset() if was_running else 0
            command = self.process.args if self.process else None
            
            if not was_running or not command:
                logger.warning(f"[{self.channel_name}] ‚ö†Ô∏è Impossible de red√©marrer: processus inactif ou commande inconnue")
                return False
                
            # Extraction du dossier HLS
            hls_dir = command[-1].rsplit('/', 1)[0]
            
            # Arr√™ter proprement
            self.stop_process()
            time.sleep(2)
            
            # Red√©marrer
            success = self.start_process(command, hls_dir)
            
            if success:
                # Restaurer la position
                self.set_playback_offset(current_offset)
                logger.info(f"[{self.channel_name}] ‚úÖ Red√©marrage r√©ussi")
                return True
            else:
                logger.error(f"[{self.channel_name}] ‚ùå √âchec du red√©marrage")
                return False
                
        except Exception as e:
            logger.error(f"[{self.channel_name}] ‚ùå Erreur lors du red√©marrage: {e}")
            return False
