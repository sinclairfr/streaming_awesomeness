import time
import threading
import datetime
import os
import shutil
import subprocess
from pathlib import Path
from config import logger
from typing import Set, Dict, Any, Optional

class ErrorHandler:
    """G√®re les erreurs et les strat√©gies de red√©marrage avec une approche plus tol√©rante"""
    
    def __init__(self, channel_name: str, max_restarts: int = 5, restart_cooldown: int = 60):
        self.channel_name = channel_name
        self.max_restarts = max_restarts
        self.restart_cooldown = restart_cooldown
        self.errors: Dict[str, Dict[str, Any]] = {}  # {error_type: {count: N, last_time: timestamp}}
        self.restart_count = 0
        self.last_restart_time = 0
        self.critical_threshold = 15  # Augment√© pour √™tre plus tol√©rant (√©tait 10)
        self.error_types: Set[str] = set()
        self.lock = threading.Lock()
        
        # P√©riode de r√©initialisation des erreurs
        self.error_reset_period = 3600  # 1 heure
        self.last_error_reset = time.time()
        
        # Chemin du fichier de log unique pour ce canal
        self.crash_log_path = Path(f"/app/logs/crashes_{self.channel_name}.log")
        self.crash_log_path.parent.mkdir(exist_ok=True)

    def add_error(self, error_type: str) -> bool:
        """
        Ajoute une erreur et d√©termine si un red√©marrage est n√©cessaire
        avec une approche plus tol√©rante
        
        Returns:
            bool: True si un red√©marrage est n√©cessaire
        """
        current_time = time.time()
        
        # R√©initialiser p√©riodiquement le compteur d'erreurs pour √©viter l'accumulation
        if current_time - self.last_error_reset > self.error_reset_period:
            self._reset_error_counts()
            self.last_error_reset = current_time
            logger.info(f"[{self.channel_name}] üîÑ R√©initialisation p√©riodique des compteurs d'erreurs")
        
        with self.lock:
            if error_type not in self.errors:
                self.errors[error_type] = {"count": 0, "last_time": 0}
            
            # Mettre √† jour le compteur d'erreurs
            self.errors[error_type]["count"] += 1
            self.errors[error_type]["last_time"] = current_time
            
            # Log de l'erreur
            self._log_crash(error_type)
            
            total_errors = sum(e["count"] for e in self.errors.values())
            logger.warning(f"[{self.channel_name}] Erreur d√©tect√©e: {error_type}, total: {total_errors}/{self.critical_threshold}")
            
            # V√©rifier si on devrait red√©marrer
            return self._should_restart(error_type)
        
    def _should_restart(self, error_type: str) -> bool:
        """
        D√©termine si un red√©marrage est n√©cessaire avec une approche plus tol√©rante
        """
        error_info = self.errors.get(error_type, {"count": 0, "last_time": 0})
        
        # 1. SIGINT (signal 2) - cas sp√©cial, plus grave
        if error_type == "signal_2" and error_info["count"] >= 3:  # Augment√© de 2 √† 3
            logger.warning(f"[{self.channel_name}] SIGINT d√©tect√© {error_info['count']} fois, red√©marrage requis")
            return True
        
        # 2. Pour les signaux, plus tol√©rant
        if error_type.startswith("signal_") and error_info["count"] >= 4:  # Augment√© de 3 √† 4
            logger.warning(f"[{self.channel_name}] {error_info['count']} signaux {error_type} d√©tect√©s, red√©marrage requis")
            return True
            
        # 3. Pour les erreurs de donn√©es, plus tol√©rant
        if error_type in ["invalid_data", "dts_error"] and error_info["count"] >= 5:  # Augment√© pour ces erreurs sp√©cifiques
            logger.warning(f"[{self.channel_name}] Trop d'erreurs {error_type}, red√©marrage requis")
            return True
            
        # 4. Pour les erreurs g√©n√©riques, encore plus tol√©rant
        total_errors = sum(e["count"] for e in self.errors.values())
        if total_errors >= 8:  # Augment√© de 5 √† 8
            logger.warning(f"[{self.channel_name}] {total_errors} erreurs accumul√©es, red√©marrage requis")
            return True
            
        # Pas assez d'erreurs pour justifier un red√©marrage
        return False
        
    def should_restart(self) -> bool:
        """
        V√©rifie si le cooldown est pass√© avant d'autoriser un red√©marrage
        """
        current_time = time.time()
        
        with self.lock:
            # Si on a d√©pass√© le nombre max de red√©marrages, on limite
            if self.restart_count >= self.max_restarts:
                # On calcule le temps √©coul√© depuis le dernier red√©marrage
                elapsed = current_time - self.last_restart_time
                
                # Si √ßa fait plus d'une heure, on r√©initialise le compteur
                if elapsed > 3600:  # 1 heure
                    logger.info(f"[{self.channel_name}] R√©initialisation du compteur de red√©marrages apr√®s 1h")
                    self.restart_count = 0
                else:
                    logger.warning(f"[{self.channel_name}] Limite de {self.max_restarts} red√©marrages atteinte")
                    return False
                
            # V√©rifier le cooldown
            if current_time - self.last_restart_time < self.restart_cooldown:
                remaining = self.restart_cooldown - (current_time - self.last_restart_time)
                logger.info(f"[{self.channel_name}] Attente du cooldown: {remaining:.1f}s restantes")
                return False
                
            # OK pour red√©marrer
            self.restart_count += 1
            self.last_restart_time = current_time
            logger.info(f"[{self.channel_name}] Red√©marrage autoris√© ({self.restart_count}/{self.max_restarts})")
            return True
        
    def reset(self):
        """R√©initialise les erreurs apr√®s un red√©marrage r√©ussi"""
        with self.lock:
            self._reset_error_counts()
            logger.info(f"[{self.channel_name}] Compteurs d'erreurs r√©initialis√©s")
    
    def _reset_error_counts(self):
        """R√©initialise les compteurs d'erreurs mais conserve les types"""
        self.errors = {error_type: {"count": 0, "last_time": 0} for error_type in self.errors}
        
    def has_critical_errors(self) -> bool:
        """V√©rifie si des erreurs critiques sont pr√©sentes"""
        with self.lock:
            total_errors = sum(e["count"] for e in self.errors.values())
            return total_errors >= self.critical_threshold
    
    def get_errors_summary(self) -> str:
        """G√©n√®re un r√©sum√© des erreurs pour le log"""
        with self.lock:
            if not self.errors:
                return "Aucune erreur"
                
            error_counts = [f"{err_type}: {data['count']}" for err_type, data in self.errors.items() if data['count'] > 0]
            if not error_counts:
                return "Aucune erreur active"
                
            return f"Erreurs: {', '.join(error_counts)}"

    def _log_crash(self, error_type: str):
        """Log des erreurs dans un fichier de crash d√©di√©"""
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        try:
            with open(self.crash_log_path, "a") as f:
                f.write(f"{timestamp} - Erreur d√©tect√©e: {error_type}\n")
                f.write(f"Compteur: {sum(e['count'] for e in self.errors.values())}, Types: {', '.join(self.errors.keys())}\n")
                f.write("-" * 80 + "\n")
        except Exception as e:
            logger.error(f"Erreur √©criture log crash pour {self.channel_name}: {e}")

    def get_errors(self) -> dict:
        """Retourne l'√©tat actuel des erreurs"""
        with self.lock:
            return {
                "count": sum(e["count"] for e in self.errors.values()),
                "types": list(self.errors.keys()),
                "restarts": self.restart_count,
                "has_critical": self.has_critical_errors(),
                "summary": self.get_errors_summary()
            }

    def handle_ffmpeg_file_error(self, channel_name: str, file_path: str) -> bool:
        """
        G√®re l'erreur de fichier FFmpeg en:
        1) D√©pla√ßant le fichier dans le dossier ignored
        2) R√©g√©n√©rant playlist.txt
        3) Relan√ßant la cha√Æne
        4) Mettant √† jour la playlist.m3u globale

        Args:
            channel_name: Nom de la cha√Æne
            file_path: Chemin du fichier probl√©matique

        Returns:
            bool: True si la r√©cup√©ration a r√©ussi, False sinon
        """
        logger.warning(f"[{channel_name}] üõ†Ô∏è Tentative de r√©cup√©ration apr√®s erreur de fichier FFmpeg")
        
        try:
            # 1. V√©rifier et d√©placer le fichier dans le dossier ignored
            file_path_obj = Path(file_path)
            if file_path_obj.exists():
                # Cr√©er le dossier ignored s'il n'existe pas
                ignored_dir = Path(f"/mnt/docker_data/streaming_awesomeness/content/{channel_name}/ignored")
                ignored_dir.mkdir(exist_ok=True)
                
                # D√©placer le fichier
                target_file = ignored_dir / file_path_obj.name
                shutil.move(str(file_path_obj), str(target_file))
                logger.info(f"[{channel_name}] ‚úÖ Fichier d√©plac√© vers ignored: {file_path_obj.name}")
            else:
                logger.warning(f"[{channel_name}] ‚ö†Ô∏è Fichier introuvable pour d√©placement: {file_path}")
            
            # 2. R√©g√©n√©rer la playlist.txt
            success = self._regenerate_playlist(channel_name)
            if not success:
                logger.error(f"[{channel_name}] ‚ùå √âchec de r√©g√©n√©ration de playlist.txt")
                return False
                
            # 3. Relancer la cha√Æne
            success = self._restart_channel(channel_name)
            if not success:
                logger.error(f"[{channel_name}] ‚ùå √âchec de red√©marrage de la cha√Æne")
                return False
                
            # 4. Mettre √† jour la playlist.m3u globale
            success = self._update_global_playlist()
            if not success:
                logger.warning(f"[{channel_name}] ‚ö†Ô∏è √âchec de mise √† jour de la playlist globale")
                # On continue malgr√© l'√©chec car la cha√Æne fonctionne
            
            logger.info(f"[{channel_name}] ‚úÖ R√©cup√©ration apr√®s erreur FFmpeg r√©ussie")
            return True
            
        except Exception as e:
            logger.error(f"[{channel_name}] ‚ùå Erreur r√©cup√©ration apr√®s erreur FFmpeg: {e}")
            return False
    
    def _regenerate_playlist(self, channel_name: str) -> bool:
        """R√©g√©n√®re la playlist.txt √† partir des fichiers dans ready_to_stream"""
        try:
            # Chemin du dossier ready_to_stream
            ready_dir = Path(f"/mnt/docker_data/streaming_awesomeness/content/{channel_name}/ready_to_stream")
            playlist_path = Path(f"/mnt/docker_data/streaming_awesomeness/content/{channel_name}/playlist.txt")
            
            if not ready_dir.exists():
                logger.error(f"[{channel_name}] ‚ùå Dossier ready_to_stream introuvable")
                return False
                
            # Filtrer uniquement les fichiers vid√©o
            video_extensions = ['.mp4', '.avi', '.mkv', '.mov', '.m4v']
            videos = []
            
            for ext in video_extensions:
                videos.extend(list(ready_dir.glob(f"*{ext}")))
            
            if not videos:
                logger.warning(f"[{channel_name}] ‚ö†Ô∏è Aucun fichier vid√©o trouv√© dans ready_to_stream")
                # Cr√©er une playlist vide quand m√™me
                with open(playlist_path, "w", encoding="utf-8") as f:
                    f.write("# Playlist vide - aucun fichier disponible\n")
                return True
                
            # Trier les vid√©os par nom
            videos.sort(key=lambda x: x.name.lower())
            
            # √âcrire la playlist
            with open(playlist_path, "w", encoding="utf-8") as f:
                for video in videos:
                    # Chemin relatif par rapport au dossier de la cha√Æne
                    rel_path = f"ready_to_stream/{video.name}"
                    f.write(f"file '{rel_path}'\n")
            
            logger.info(f"[{channel_name}] ‚úÖ Playlist r√©g√©n√©r√©e avec {len(videos)} fichiers")
            return True
            
        except Exception as e:
            logger.error(f"[{channel_name}] ‚ùå Erreur r√©g√©n√©ration playlist: {e}")
            return False
    
    def _restart_channel(self, channel_name: str) -> bool:
        """Red√©marre la cha√Æne en appelant le gestionnaire appropri√©"""
        try:
            # On envoie un signal via le dossier state pour forcer un red√©marrage
            trigger_file = Path(f"/app/state/{channel_name}_restart")
            trigger_file.touch(exist_ok=True)
            
            logger.info(f"[{channel_name}] ‚úÖ Signal de red√©marrage envoy√©")
            return True
            
        except Exception as e:
            logger.error(f"[{channel_name}] ‚ùå Erreur envoi signal red√©marrage: {e}")
            return False
    
    def _update_global_playlist(self) -> bool:
        """Met √† jour la playlist.m3u globale"""
        try:
            # Ex√©cute le script de cr√©ation de la playlist ma√Ætre
            result = subprocess.run(
                ["python3", "/app/create_master_playlist.py"], 
                capture_output=True, 
                text=True, 
                timeout=30
            )
            
            if result.returncode == 0:
                logger.info("‚úÖ Playlist.m3u globale mise √† jour")
                return True
            else:
                logger.error(f"‚ùå √âchec mise √† jour playlist globale: {result.stderr}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur mise √† jour playlist globale: {e}")
            return False 