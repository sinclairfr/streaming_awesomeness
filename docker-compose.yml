services:
  iptv-manager:
    container_name: iptv-manager
    env_file:
      - .env
    build:
      context: .
      dockerfile: Dockerfile
    #user: "1000:1000"  # Ex√©cuter en tant qu'utilisateur non-root (streamer)
    user: root
    entrypoint: ["/bin/bash", "-c", "id -g streamer || groupadd streamer; id -u streamer || useradd -m -g streamer streamer; chmod 777 /dev/dri/renderD128 || true; chmod 777 /dev/dri/card1 || true; chown -R streamer:streamer /app /var/log/nginx || true; chmod -R 777 /app /var/log/nginx || true; exec python3 main.py"]
    volumes:
      - ./app/hls:/app/hls:rw
      - ./app/logs:/app/logs:rw
      - ./nginx_logs:/var/log/nginx:rw
      - ./app:/app:rw  # Regroupe tous les fichiers de l'application
      - ./requirements.txt:/app/requirements.txt:rw
      - /mnt/docker_data/torrent_machine/downloads/streaming_awesomeness:/mnt/videos/streaming_awesomeness
       # For memory management
    devices:
      - /dev/dri/card1:/dev/dri/card1
      - /dev/dri/renderD128:/dev/dri/renderD128
    security_opt:
      - apparmor:unconfined  # May be needed for full GPU access
    environment:
      - TZ=Europe/Paris
      - NVIDIA_VISIBLE_DEVICES=
      - PUID=1000
      - PGID=1000
    restart: unless-stopped

  nginx:
    user: root
    container_name: iptv-nginx
    image: nginx:alpine
    environment:
      - TZ=Europe/Paris
    env_file:
      - .env
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:rw
      - ./app/hls:/hls:rw
      - ./nginx_logs:/var/log/nginx:rw
    tmpfs:
      - /var/run/nginx
      - /var/cache/nginx
    depends_on:
      - iptv-manager
    restart: unless-stopped
